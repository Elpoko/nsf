{"ast":null,"code":"import { focus, getAllFocusable } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useEventListener } from \"./use-event-listener\";\nimport { useLatestRef } from \"./use-latest-ref\";\nvar defaultOptions = {\n  preventScroll: true,\n  shouldFocus: false\n};\nexport function useConditionalFocus(target, options) {\n  if (options === void 0) {\n    options = defaultOptions;\n  }\n\n  var {\n    focusRef,\n    preventScroll,\n    shouldFocus,\n    visible\n  } = options;\n  var element = target && \"current\" in target ? target.current : target;\n  var autoFocus = shouldFocus && visible;\n\n  var onFocus = () => {\n    if (!element || !autoFocus || element.contains(document.activeElement) || element === document.activeElement) return;\n\n    if (focusRef == null ? void 0 : focusRef.current) {\n      focus(focusRef.current, {\n        preventScroll\n      });\n    } else {\n      var tabbableEls = getAllFocusable(element);\n\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], {\n          preventScroll\n        });\n      }\n    }\n  };\n\n  var onFocusRef = useLatestRef(onFocus);\n  React.useEffect(() => {\n    onFocusRef.current();\n  }, []);\n  useEventListener(\"transitionend\", onFocus, element);\n}","map":{"version":3,"sources":["../../src/use-conditional-focus.ts"],"names":["defaultOptions","preventScroll","shouldFocus","options","visible","element","target","autoFocus","onFocus","document","focusRef","focus","tabbableEls","getAllFocusable","onFocusRef","useLatestRef","React","useEventListener"],"mappings":"AAAA,SAAA,KAAA,EAAA,eAAA,QAAA,kBAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,gBAAA,QAAA,sBAAA;AACA,SAAA,YAAA,QAAA,kBAAA;AASA,IAAMA,cAA0C,GAAG;AACjDC,EAAAA,aAAa,EADoC,IAAA;AAEjDC,EAAAA,WAAW,EAAE;AAFoC,CAAnD;AAKA,OAAO,SAAA,mBAAA,CAAA,MAAA,EAAA,OAAA,EAGL;AAAA,MADAC,OACA,KAAA,KAAA,CAAA,EAAA;AADAA,IAAAA,OACA,GADUH,cAAVG;AACA;;AACA,MAAM;AAAA,IAAA,QAAA;AAAA,IAAA,aAAA;AAAA,IAAA,WAAA;AAAwCC,IAAAA;AAAxC,MAAN,OAAA;AACA,MAAMC,OAAO,GAAGC,MAAM,IAAI,aAAVA,MAAAA,GAAgCA,MAAM,CAAtCA,OAAAA,GAAhB,MAAA;AAEA,MAAMC,SAAS,GAAGL,WAAW,IAA7B,OAAA;;AAEA,MAAMM,OAAO,GAAG,MAAM;AACpB,QACE,CAAA,OAAA,IACA,CADA,SAAA,IAEAH,OAAO,CAAPA,QAAAA,CAAiBI,QAAQ,CAFzB,aAEAJ,CAFA,IAGAA,OAAO,KAAKI,QAAQ,CAJtB,aAAA,EAME;;AAEF,QAAIC,QAAJ,IAAA,IAAIA,GAAJ,KAAA,CAAIA,GAAAA,QAAQ,CAAZ,OAAA,EAAuB;AACrBC,MAAAA,KAAK,CAACD,QAAQ,CAAT,OAAA,EAAmB;AAAET,QAAAA;AAAF,OAAnB,CAALU;AADF,KAAA,MAEO;AACL,UAAMC,WAAW,GAAGC,eAAe,CAAnC,OAAmC,CAAnC;;AACA,UAAID,WAAW,CAAXA,MAAAA,GAAJ,CAAA,EAA4B;AAC1BD,QAAAA,KAAK,CAACC,WAAW,CAAZ,CAAY,CAAZ,EAAiB;AAAEX,UAAAA;AAAF,SAAjB,CAALU;AACD;AACF;AAhBH,GAAA;;AAmBA,MAAMG,UAAU,GAAGC,YAAY,CAA/B,OAA+B,CAA/B;AAEAC,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpBF,IAAAA,UAAU,CAAVA,OAAAA;AADFE,GAAAA,EAAAA,EAAAA;AAIAC,EAAAA,gBAAgB,CAAA,eAAA,EAAA,OAAA,EAAhBA,OAAgB,CAAhBA;AACD","sourcesContent":["import { focus, FocusableElement, getAllFocusable } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useEventListener } from \"./use-event-listener\"\nimport { useLatestRef } from \"./use-latest-ref\"\n\nexport interface UseConditionalFocusOptions {\n  visible?: boolean\n  shouldFocus?: boolean\n  preventScroll?: boolean\n  focusRef?: React.RefObject<FocusableElement>\n}\n\nconst defaultOptions: UseConditionalFocusOptions = {\n  preventScroll: true,\n  shouldFocus: false,\n}\n\nexport function useConditionalFocus<T extends HTMLElement>(\n  target: React.RefObject<T> | T,\n  options = defaultOptions,\n) {\n  const { focusRef, preventScroll, shouldFocus, visible } = options\n  const element = target && \"current\" in target ? target.current : target\n\n  const autoFocus = shouldFocus && visible\n\n  const onFocus = () => {\n    if (\n      !element ||\n      !autoFocus ||\n      element.contains(document.activeElement) ||\n      element === document.activeElement\n    )\n      return\n\n    if (focusRef?.current) {\n      focus(focusRef.current, { preventScroll })\n    } else {\n      const tabbableEls = getAllFocusable(element)\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], { preventScroll })\n      }\n    }\n  }\n\n  const onFocusRef = useLatestRef(onFocus)\n\n  React.useEffect(() => {\n    onFocusRef.current()\n  }, [])\n\n  useEventListener(\"transitionend\", onFocus, element)\n}\n"]},"metadata":{},"sourceType":"module"}