{"ast":null,"code":"import _slicedToArray from \"/Users/tommccarthy/nsf/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { css } from \"@chakra-ui/styled-system\";\nimport { createContext, memoizedGet as get, mergeWith, runIfFn } from \"@chakra-ui/utils\";\nimport { Global, ThemeContext } from \"@emotion/core\";\nimport * as React from \"react\";\nexport var ThemeProvider = function ThemeProvider(props) {\n  var children = props.children,\n      theme = props.theme;\n  var outerTheme = React.useContext(ThemeContext);\n  var mergedTheme = mergeWith({}, outerTheme, theme);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: mergedTheme\n  }, children);\n};\nexport function useTheme() {\n  var theme = React.useContext(ThemeContext);\n\n  if (!theme) {\n    throw Error(\"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />`\");\n  }\n\n  return theme;\n}\n\nvar _createContext = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    StylesProvider = _createContext2[0],\n    useStyles = _createContext2[1];\n\nexport { StylesProvider, useStyles };\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\n\nexport var GlobalStyle = function GlobalStyle() {\n  var _useColorMode = useColorMode(),\n      colorMode = _useColorMode.colorMode;\n\n  return /*#__PURE__*/React.createElement(Global, {\n    styles: function styles(theme) {\n      var styleObjectOrFn = get(theme, \"styles.global\");\n      var globalStyles = runIfFn(styleObjectOrFn, {\n        theme: theme,\n        colorMode: colorMode\n      });\n      if (!globalStyles) return undefined;\n      var styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n};","map":{"version":3,"sources":["../../src/providers.tsx"],"names":["memoizedGet","ThemeProvider","props","theme","outerTheme","React","mergedTheme","mergeWith","Error","createContext","name","errorMessage","GlobalStyle","colorMode","useColorMode","styleObjectOrFn","get","globalStyles","runIfFn","styles","css"],"mappings":";AAAA,SAAA,YAAA,QAAA,uBAAA;AACA,SAAA,GAAA,QAAA,0BAAA;AACA,SAAA,aAAA,EAGEA,WAAW,IAHb,GAAA,EAAA,SAAA,EAAA,OAAA,QAAA,kBAAA;AAOA,SAAA,MAAA,EAAA,YAAA,QAAA,eAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AASA,OAAO,IAAMC,aAA2C,GAAIC,SAA/CD,aAA+CC,CAAAA,KAAD,EAAW;AAAA,MAC9D,QAD8D,GACpE,KADoE,CAC9D,QAD8D;AAAA,MAClDC,KADkD,GACpE,KADoE,CAClDA,KADkD;AAEpE,MAAMC,UAAU,GAAGC,KAAK,CAALA,UAAAA,CAAnB,YAAmBA,CAAnB;AACA,MAAMC,WAAW,GAAGC,SAAS,CAAA,EAAA,EAAA,UAAA,EAA7B,KAA6B,CAA7B;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,YAAD,CAAA,QAAA,EAAA;AAAuB,IAAA,KAAK,EAAED;AAA9B,GAAA,EADF,QACE,CADF;AALK,CAAA;AAYP,OAAO,SAAA,QAAA,GAA6C;AAClD,MAAMH,KAAK,GAAGE,KAAK,CAALA,UAAAA,CAAd,YAAcA,CAAd;;AAGA,MAAI,CAAJ,KAAA,EAAY;AACV,UAAMG,KAAK,CAAX,2FAAW,CAAX;AAGD;;AAED,SAAA,KAAA;AACD;;qBAEmCC,aAAa,CAA0B;AACzEC,EAAAA,IAAI,EADqE,eAAA;AAEzEC,EAAAA,YAAY,EACV;AAHuE,CAA1B,C;;IAA3C,c;IAAA,S;;AAMN,SAAA,cAAA,EAAA,SAAA;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAAA,sBACTE,YAAtB,EAD+B;AAAA,MACvBD,SADuB,iBACvBA,SADuB;;AAE/B,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACE,IAAA,MAAM,EAAGV,gBAAAA,KAAD,EAAW;AACjB,UAAMY,eAAe,GAAGC,GAAG,CAAA,KAAA,EAA3B,eAA2B,CAA3B;AACA,UAAMC,YAAY,GAAGC,OAAO,CAAA,eAAA,EAAkB;AAAEf,QAAAA,KAAF,EAAEA,KAAF;AAASU,QAAAA,SAAAA,EAAAA;AAAT,OAAlB,CAA5B;AACA,UAAI,CAAJ,YAAA,EAAmB,OAAA,SAAA;AACnB,UAAMM,MAAM,GAAGC,GAAG,CAAHA,YAAG,CAAHA,CAAf,KAAeA,CAAf;AACA,aAAA,MAAA;AACD;AAPH,GAAA,CADF;AAFK,CAAA","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { css, SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  createContext,\n  Dict,\n  memoizedGet as get,\n  mergeWith,\n  runIfFn,\n} from \"@chakra-ui/utils\"\nimport { Global, Interpolation, ThemeContext } from \"@emotion/core\"\nimport * as React from \"react\"\n\nexport interface ThemeProviderProps {\n  /**\n   * The theme to use for your application\n   */\n  theme: Dict\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = (props) => {\n  const { children, theme } = props\n  const outerTheme = React.useContext(ThemeContext) as Dict\n  const mergedTheme = mergeWith({}, outerTheme, theme)\n\n  return (\n    <ThemeContext.Provider value={mergedTheme}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nexport function useTheme<T extends object = Dict>() {\n  const theme = React.useContext(\n    (ThemeContext as unknown) as React.Context<T | undefined>,\n  )\n  if (!theme) {\n    throw Error(\n      \"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />`\",\n    )\n  }\n\n  return theme\n}\n\nconst [StylesProvider, useStyles] = createContext<Dict<SystemStyleObject>>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\n\nexport { StylesProvider, useStyles }\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport const GlobalStyle = () => {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation\n      }}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}