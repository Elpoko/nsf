{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\";\nimport { useControllableState, useDisclosure, useEventListener, useFocusOnHide, useId, useIds, useOutsideClick, useShortcut, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { addItem, callAllHandlers, createContext, dataAttr, focus, getNextIndex, getNextItemFromSearch, getPrevIndex, getValidChildren, isArray, isString, mergeRefs, mergeWith, normalizeEventKey, removeItem } from \"@chakra-ui/utils\";\nimport { cloneElement, useCallback, useRef, useState } from \"react\";\nvar [MenuProvider, useMenuContext] = createContext({\n  strict: false,\n  name: \"MenuContext\"\n});\nexport { MenuProvider, useMenuContext };\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate it's return value to all children\n */\n\nexport function useMenu(props) {\n  var {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    autoSelect = true,\n    placement: placementProp = \"bottom-start\",\n    gutter,\n    fixed = true,\n    preventOverflow,\n    modifiers,\n    isLazy\n  } = props;\n  var {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle\n  } = useDisclosure(props);\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n\n  var menuRef = useRef(null);\n  var buttonRef = useRef(null);\n  useOutsideClick({\n    ref: menuRef,\n    handler: event => {\n      var _buttonRef$current;\n\n      if (isOpen && closeOnBlur && !((_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n\n  var popper = usePopper({\n    placement: placementProp,\n    fixed,\n    gutter,\n    preventOverflow,\n    modifiers\n  });\n  var [focusedIndex, setFocusedIndex] = useState(-1);\n  /**\n   * Context to register all menu item nodes\n   */\n\n  var domContext = useDescendants();\n  /**\n   * Focus the button when we close the menu\n   */\n\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1);\n    }\n  }, [isOpen]);\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen\n  });\n  /**\n   * Generate unique ids for menu's list and button\n   */\n\n  var [buttonId, menuId] = useIds(id, \"menu-button\", \"menu-list\");\n  var openAndFocusMenu = useCallback(() => {\n    onOpen();\n    if (menuRef.current) focus(menuRef.current);\n  }, [onOpen, menuRef]);\n  var openAndFocusFirstItem = useCallback(() => {\n    onOpen();\n    setFocusedIndex(0);\n  }, [onOpen, setFocusedIndex]);\n  var openAndFocusLastItem = useCallback(() => {\n    onOpen();\n    setFocusedIndex(domContext.descendants.length - 1);\n  }, [onOpen, setFocusedIndex, domContext.descendants]);\n\n  var refocus = () => {\n    var _menuRef$current;\n\n    var hasFocusWithin = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(document.activeElement);\n    var shouldRefocus = isOpen && !hasFocusWithin;\n    if (!shouldRefocus) return;\n    requestAnimationFrame(() => {\n      var _domContext$descendan;\n\n      var el = (_domContext$descendan = domContext.descendants[focusedIndex]) == null ? void 0 : _domContext$descendan.element;\n      el == null ? void 0 : el.focus({\n        preventScroll: true\n      });\n    });\n  };\n\n  useEventListener(\"transitionend\", refocus, menuRef.current);\n\n  var onTransitionEnd = () => {\n    var _menuRef$current2;\n    /**\n     * If we use CSS for transitioning this component, there would be no\n     * need to dispatch a custom event. This is only useful for JS only\n     * motion libraries like `framer-motion` to `react-spring`.\n     *\n     * They usually provide an `onRest` or `onAnimationComplete` callback we can\n     * use to trigger the custom `transitionend` event.\n     */\n\n\n    (_menuRef$current2 = menuRef.current) == null ? void 0 : _menuRef$current2.dispatchEvent(new Event(\"transitionend\"));\n  };\n\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd,\n    domContext,\n    popper,\n    buttonId,\n    menuId,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy\n  };\n}\nexport function useMenuList(props, ref) {\n  if (ref === void 0) {\n    ref = null;\n  }\n\n  var menu = useMenuContext();\n\n  if (!menu) {\n    throw new Error(\"useMenuContext: context is undefined. Seems you forgot the component within <Menu>\");\n  }\n\n  var {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    popper,\n    domContext: {\n      descendants\n    },\n    isLazy\n  } = menu;\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n\n  var onCharacterPress = useShortcut({\n    preventDefault: event => event.key !== \" \"\n  });\n  var onKeyDown = useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Tab: event => {\n        event.preventDefault();\n      },\n      Escape: onClose,\n      ArrowDown: () => {\n        var nextIndex = getNextIndex(focusedIndex, descendants.length);\n        setFocusedIndex(nextIndex);\n      },\n      ArrowUp: () => {\n        var prevIndex = getPrevIndex(focusedIndex, descendants.length);\n        setFocusedIndex(prevIndex);\n      }\n    };\n    var handler = keyMap[eventKey];\n\n    if (handler) {\n      event.preventDefault();\n      handler(event);\n      return;\n    }\n\n    var characterHandler = onCharacterPress(character => {\n      /**\n       * Typeahead: Based on current character pressed,\n       * find the next item to be selected\n       */\n      var nextItem = getNextItemFromSearch(descendants, character, node => {\n        var _node$element;\n\n        return ((_node$element = node.element) == null ? void 0 : _node$element.textContent) || \"\";\n      }, descendants[focusedIndex]);\n\n      if (nextItem) {\n        var index = descendants.indexOf(nextItem);\n        setFocusedIndex(index);\n      }\n    });\n    characterHandler(event);\n  }, [descendants, focusedIndex, onCharacterPress, onClose, setFocusedIndex]);\n\n  var menulistProps = _extends({}, props, {\n    ref: mergeRefs(menuRef, ref),\n    children: !isLazy || isOpen ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: _extends({}, props.style, {\n      transformOrigin: popper.transformOrigin\n    }),\n    \"aria-orientation\": \"vertical\",\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n\n  return menulistProps;\n}\nexport function useMenuPositioner(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    popper,\n    isOpen\n  } = useMenuContext();\n  return mergeWith(popper.getPopperProps(props), {\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\"\n    }\n  });\n}\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and it's return value\n * is passed as `context` to this hook.\n */\n\nexport function useMenuButton(props, externalRef) {\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var menu = useMenuContext();\n  var {\n    isOpen,\n    onClose,\n    autoSelect,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    openAndFocusMenu\n  } = menu;\n  var onClick = useCallback(() => {\n    if (isOpen) {\n      onClose();\n    } else {\n      var action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu;\n      action();\n    }\n  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu]);\n  var onKeyDown = useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Enter: openAndFocusFirstItem,\n      ArrowDown: openAndFocusFirstItem,\n      ArrowUp: openAndFocusLastItem\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n    }\n  }, [openAndFocusFirstItem, openAndFocusLastItem]);\n\n  var buttonProps = _extends({}, props, {\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\",\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onClick),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n\n  return popper.getReferenceProps(buttonProps, mergeRefs(menu.buttonRef, externalRef));\n}\nexport function useMenuItem(props, externalRef) {\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var {\n    onClick: onClickProp,\n    isDisabled,\n    isFocusable\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onMouseOut\", \"onClick\", \"isDisabled\", \"isFocusable\"]);\n\n  var menu = useMenuContext();\n  var {\n    domContext,\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect,\n    onClose,\n    menuRef\n  } = menu;\n  var ref = useRef(null);\n  var id = \"menuitem-\" + useId();\n  /**\n   * Register the menuitem's node into the domContext\n   */\n\n  var index = useDescendant({\n    element: ref.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable\n  });\n  var onMouseEnter = useCallback(() => {\n    if (isDisabled) return;\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index, isDisabled]);\n  var onMouseMove = useCallback(() => {\n    if (document.activeElement !== ref.current) {\n      onMouseEnter();\n    }\n  }, [onMouseEnter]);\n  var onMouseLeave = useCallback(() => {\n    if (isDisabled) return;\n    setFocusedIndex(-1);\n  }, [setFocusedIndex, isDisabled]);\n  var onClick = useCallback(event => {\n    onClickProp == null ? void 0 : onClickProp(event);\n    /**\n     * Close menu and parent menu's if `closeOnSelect` is set to `true`\n     */\n\n    if (closeOnSelect) {\n      onClose();\n    }\n  }, [onClose, onClickProp, closeOnSelect]);\n  var isFocused = index === focusedIndex;\n  var trulyDisabled = isDisabled && !isFocusable;\n  useUpdateEffect(() => {\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current);\n    } else if (document.activeElement !== menuRef.current) {\n      var _menuRef$current3;\n\n      (_menuRef$current3 = menuRef.current) == null ? void 0 : _menuRef$current3.focus();\n    }\n  }, [isFocused, trulyDisabled, menuRef]);\n  var tabbable = useClickable({\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(ref, externalRef),\n    isDisabled,\n    isFocusable\n  });\n  return _extends({}, htmlProps, tabbable, {\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1\n  });\n}\nexport function useMenuOption(props, externalRef) {\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var {\n    onClick,\n    isDisabled,\n    isFocusable,\n    type = \"radio\",\n    isChecked\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"onMouseOut\", \"onClick\", \"isDisabled\", \"isFocusable\", \"type\", \"isChecked\"]);\n\n  var hookProps = {\n    isDisabled,\n    isFocusable,\n    onClick\n  };\n  var optionsProps = useMenuItem(hookProps, externalRef);\n  return _extends({}, rest, optionsProps, {\n    role: \"menuitem\" + type,\n    \"aria-checked\": isChecked\n  });\n}\nexport function useMenuOptionGroup(props) {\n  var {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"children\", \"type\", \"value\", \"defaultValue\", \"onChange\"]);\n\n  var isRadio = type === \"radio\";\n  var fallback = isRadio ? \"\" : [];\n  var [value, setValue] = useControllableState({\n    defaultValue: defaultValue != null ? defaultValue : fallback,\n    value: valueProp,\n    onChange\n  });\n  var handleChange = useCallback(selectedValue => {\n    if (type === \"radio\" && isString(value)) {\n      setValue(selectedValue);\n    }\n\n    if (type === \"checkbox\" && isArray(value)) {\n      var nextValue = value.includes(selectedValue) ? removeItem(value, selectedValue) : addItem(value, selectedValue);\n      setValue(nextValue);\n    }\n  }, [value, setValue, type]);\n  var validChildren = getValidChildren(children);\n  var clones = validChildren.map(child => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if (child.type.id !== \"MenuItemOption\") return child;\n\n    var onClick = event => {\n      handleChange(child.props.value);\n      child.props.onClick == null ? void 0 : child.props.onClick(event);\n    };\n\n    var isChecked = type === \"radio\" ? child.props.value === value : value.includes(child.props.value);\n    return /*#__PURE__*/cloneElement(child, {\n      type,\n      onClick,\n      isChecked\n    });\n  });\n  return _extends({}, htmlProps, {\n    children: clones\n  });\n}\nexport function useMenuState() {\n  var {\n    isOpen,\n    onClose\n  } = useMenuContext();\n  return {\n    isOpen,\n    onClose\n  };\n}","map":{"version":3,"sources":["../../src/use-menu.ts"],"names":["createContext","strict","name","closeOnSelect","closeOnBlur","autoSelect","placement","placementProp","fixed","isLazy","onToggle","useDisclosure","menuRef","useRef","buttonRef","useOutsideClick","ref","handler","event","isOpen","onClose","popper","usePopper","modifiers","useState","domContext","useDescendants","useUpdateEffect","setFocusedIndex","useFocusOnHide","focusRef","visible","useIds","openAndFocusMenu","useCallback","onOpen","focus","openAndFocusFirstItem","openAndFocusLastItem","refocus","hasFocusWithin","document","shouldRefocus","requestAnimationFrame","el","preventScroll","useEventListener","onTransitionEnd","orientation","menu","useMenuContext","descendants","onCharacterPress","useShortcut","preventDefault","onKeyDown","eventKey","normalizeEventKey","keyMap","Tab","Escape","ArrowDown","nextIndex","getNextIndex","ArrowUp","prevIndex","getPrevIndex","characterHandler","character","nextItem","getNextItemFromSearch","node","index","menulistProps","mergeRefs","children","props","tabIndex","role","id","style","transformOrigin","callAllHandlers","mergeWith","visibility","externalRef","onClick","action","Enter","buttonProps","dataAttr","isFocusable","htmlProps","useId","useDescendant","element","context","disabled","focusable","onMouseEnter","onMouseMove","onMouseLeave","onClickProp","isFocused","trulyDisabled","isDisabled","tabbable","useClickable","type","isChecked","rest","hookProps","optionsProps","useMenuItem","value","onChange","isRadio","fallback","useControllableState","defaultValue","handleChange","selectedValue","isString","setValue","isArray","nextValue","removeItem","addItem","validChildren","getValidChildren","clones","child","cloneElement"],"mappings":"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","sourcesContent":["import { useClickable } from \"@chakra-ui/clickable\"\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useDisclosure,\n  useEventListener,\n  useFocusOnHide,\n  useId,\n  useIds,\n  useOutsideClick,\n  useShortcut,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport {\n  addItem,\n  callAllHandlers,\n  createContext,\n  dataAttr,\n  EventKeyMap,\n  focus,\n  getNextIndex,\n  getNextItemFromSearch,\n  getPrevIndex,\n  getValidChildren,\n  isArray,\n  isString,\n  mergeRefs,\n  mergeWith,\n  normalizeEventKey,\n  removeItem,\n} from \"@chakra-ui/utils\"\nimport React, {\n  cloneElement,\n  HTMLAttributes,\n  MouseEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\n\nconst [MenuProvider, useMenuContext] = createContext<UseMenuReturn>({\n  strict: false,\n  name: \"MenuContext\",\n})\n\nexport { MenuProvider, useMenuContext }\n\nexport interface UseMenuProps extends UsePopperProps {\n  /**\n   * Unique id to be used by menu and it's children\n   */\n  id?: string\n  /**\n   * If `true`, the menu will close when a menu item is\n   * clicked\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n  /**\n   * If `true`, the menu will close when you click outside\n   * the menu list\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the first enabled menu item will be selected\n   * when the menu opens.\n   *\n   * @default true\n   */\n  autoSelect?: boolean\n  /**\n   * The Popper.js modifiers to use\n   */\n  modifiers?: UsePopperProps[\"modifiers\"]\n  /**\n   * Performance 🚀:\n   * If `true`, the MenuItem rendering will be deferred\n   * until the menu is open.\n   */\n  isLazy?: boolean\n  /**\n   * If `true`, the top-level menu will be opened in controlled mode\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the top-level menu will be opened in un-controlled mode\n   */\n  defaultIsOpen?: boolean\n  /**\n   * Function to be called when menu is open\n   */\n  onOpen?: () => void\n  /**\n   * Function to be called when menu is closed\n   */\n  onClose?: () => void\n}\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate it's return value to all children\n */\nexport function useMenu(props: UseMenuProps) {\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    autoSelect = true,\n    placement: placementProp = \"bottom-start\",\n    gutter,\n    fixed = true,\n    preventOverflow,\n    modifiers,\n    isLazy,\n  } = props\n\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure(props)\n\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n  const menuRef = useRef<HTMLDivElement>(null)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n\n  useOutsideClick({\n    ref: menuRef,\n    handler: (event) => {\n      if (\n        isOpen &&\n        closeOnBlur &&\n        !buttonRef.current?.contains(event.target as HTMLElement)\n      ) {\n        onClose()\n      }\n    },\n  })\n\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n  const popper = usePopper({\n    placement: placementProp,\n    fixed,\n    gutter,\n    preventOverflow,\n    modifiers,\n  })\n\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  /**\n   * Context to register all menu item nodes\n   */\n  const domContext = useDescendants<HTMLDivElement, {}>()\n\n  /**\n   * Focus the button when we close the menu\n   */\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1)\n    }\n  }, [isOpen])\n\n  useFocusOnHide(menuRef, { focusRef: buttonRef, visible: isOpen })\n\n  /**\n   * Generate unique ids for menu's list and button\n   */\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`)\n\n  const openAndFocusMenu = useCallback(() => {\n    onOpen()\n    if (menuRef.current) focus(menuRef.current)\n  }, [onOpen, menuRef])\n\n  const openAndFocusFirstItem = useCallback(() => {\n    onOpen()\n    setFocusedIndex(0)\n  }, [onOpen, setFocusedIndex])\n\n  const openAndFocusLastItem = useCallback(() => {\n    onOpen()\n    setFocusedIndex(domContext.descendants.length - 1)\n  }, [onOpen, setFocusedIndex, domContext.descendants])\n\n  const refocus = () => {\n    const hasFocusWithin = menuRef.current?.contains(document.activeElement)\n    const shouldRefocus = isOpen && !hasFocusWithin\n    if (!shouldRefocus) return\n    requestAnimationFrame(() => {\n      const el = domContext.descendants[focusedIndex]?.element\n      el?.focus({ preventScroll: true })\n    })\n  }\n\n  useEventListener(\"transitionend\", refocus, menuRef.current)\n\n  const onTransitionEnd = () => {\n    /**\n     * If we use CSS for transitioning this component, there would be no\n     * need to dispatch a custom event. This is only useful for JS only\n     * motion libraries like `framer-motion` to `react-spring`.\n     *\n     * They usually provide an `onRest` or `onAnimationComplete` callback we can\n     * use to trigger the custom `transitionend` event.\n     */\n    menuRef.current?.dispatchEvent(new Event(\"transitionend\"))\n  }\n\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd,\n    domContext,\n    popper,\n    buttonId,\n    menuId,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n  }\n}\n\nexport interface UseMenuReturn extends ReturnType<typeof useMenu> {}\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and it's return value\n * is passed as `context` to this hook.\n */\n\nexport interface UseMenuListProps\n  extends Omit<HTMLAttributes<Element>, \"color\"> {}\n\nexport function useMenuList(\n  props: UseMenuListProps,\n  ref: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  if (!menu) {\n    throw new Error(\n      `useMenuContext: context is undefined. Seems you forgot the component within <Menu>`,\n    )\n  }\n\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    popper,\n    domContext: { descendants },\n    isLazy,\n  } = menu\n\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n  const onCharacterPress = useShortcut({\n    preventDefault: (event) => event.key !== \" \",\n  })\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Tab: (event) => {\n          event.preventDefault()\n        },\n        Escape: onClose,\n        ArrowDown: () => {\n          const nextIndex = getNextIndex(focusedIndex, descendants.length)\n          setFocusedIndex(nextIndex)\n        },\n        ArrowUp: () => {\n          const prevIndex = getPrevIndex(focusedIndex, descendants.length)\n          setFocusedIndex(prevIndex)\n        },\n      }\n\n      const handler = keyMap[eventKey]\n\n      if (handler) {\n        event.preventDefault()\n        handler(event)\n        return\n      }\n\n      const characterHandler = onCharacterPress((character) => {\n        /**\n         * Typeahead: Based on current character pressed,\n         * find the next item to be selected\n         */\n        const nextItem = getNextItemFromSearch(\n          descendants,\n          character,\n          (node) => node.element?.textContent || \"\",\n          descendants[focusedIndex],\n        )\n\n        if (nextItem) {\n          const index = descendants.indexOf(nextItem)\n          setFocusedIndex(index)\n        }\n      })\n\n      characterHandler(event)\n    },\n    [descendants, focusedIndex, onCharacterPress, onClose, setFocusedIndex],\n  )\n\n  const menulistProps: any = {\n    ...props,\n    ref: mergeRefs(menuRef, ref),\n    children: !isLazy || isOpen ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: {\n      ...props.style,\n      transformOrigin: popper.transformOrigin,\n    },\n    \"aria-orientation\": \"vertical\" as React.AriaAttributes[\"aria-orientation\"],\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n\n  return menulistProps\n}\n\nexport function useMenuPositioner(props: any = {}) {\n  const { popper, isOpen } = useMenuContext()\n  return mergeWith(popper.getPopperProps(props), {\n    style: { visibility: isOpen ? \"visible\" : \"hidden\" },\n  })\n}\n\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and it's return value\n * is passed as `context` to this hook.\n */\n\nexport interface UseMenuButtonProps\n  extends Omit<HTMLAttributes<Element>, \"color\"> {}\n\nexport function useMenuButton(\n  props: UseMenuButtonProps,\n  externalRef: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  const {\n    isOpen,\n    onClose,\n    autoSelect,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    openAndFocusMenu,\n  } = menu\n\n  const onClick = useCallback(() => {\n    if (isOpen) {\n      onClose()\n    } else {\n      const action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu\n      action()\n    }\n  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu])\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        Enter: openAndFocusFirstItem,\n        ArrowDown: openAndFocusFirstItem,\n        ArrowUp: openAndFocusLastItem,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n      }\n    },\n    [openAndFocusFirstItem, openAndFocusLastItem],\n  )\n\n  const buttonProps = {\n    ...props,\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\" as React.AriaAttributes[\"aria-haspopup\"],\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onClick),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n\n  return popper.getReferenceProps(\n    buttonProps,\n    mergeRefs(menu.buttonRef, externalRef),\n  )\n}\n\nexport interface UseMenuItemProps\n  extends Omit<HTMLAttributes<Element>, \"color\"> {\n  isDisabled?: boolean\n  isFocusable?: boolean\n}\n\nexport function useMenuItem(\n  props: UseMenuItemProps,\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onMouseOut: onMouseOutProp,\n    onClick: onClickProp,\n    isDisabled,\n    isFocusable,\n    ...htmlProps\n  } = props\n\n  const menu = useMenuContext()\n\n  const {\n    domContext,\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect,\n    onClose,\n    menuRef,\n  } = menu\n\n  const ref = useRef<HTMLDivElement>(null)\n  const id = `menuitem-${useId()}`\n\n  /**\n   * Register the menuitem's node into the domContext\n   */\n  const index = useDescendant({\n    element: ref.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable,\n  })\n\n  const onMouseEnter = useCallback(() => {\n    if (isDisabled) return\n    setFocusedIndex(index)\n  }, [setFocusedIndex, index, isDisabled])\n\n  const onMouseMove = useCallback(() => {\n    if (document.activeElement !== ref.current) {\n      onMouseEnter()\n    }\n  }, [onMouseEnter])\n\n  const onMouseLeave = useCallback(() => {\n    if (isDisabled) return\n    setFocusedIndex(-1)\n  }, [setFocusedIndex, isDisabled])\n\n  const onClick = useCallback(\n    (event: MouseEvent) => {\n      onClickProp?.(event)\n      /**\n       * Close menu and parent menu's if `closeOnSelect` is set to `true`\n       */\n      if (closeOnSelect) {\n        onClose()\n      }\n    },\n    [onClose, onClickProp, closeOnSelect],\n  )\n\n  const isFocused = index === focusedIndex\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  useUpdateEffect(() => {\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current)\n    } else if (document.activeElement !== menuRef.current) {\n      menuRef.current?.focus()\n    }\n  }, [isFocused, trulyDisabled, menuRef])\n\n  const tabbable = useClickable({\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(ref, externalRef),\n    isDisabled,\n    isFocusable,\n  })\n\n  return {\n    ...htmlProps,\n    ...tabbable,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1,\n  }\n}\n\nexport interface UseMenuOptionOptions {\n  value?: string\n  isChecked?: boolean\n  type?: \"radio\" | \"checkbox\"\n  children?: React.ReactNode\n}\n\nexport interface UseMenuOptionProps\n  extends UseMenuItemProps,\n    UseMenuOptionOptions {}\n\nexport function useMenuOption(\n  props: UseMenuOptionProps,\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onMouseOut,\n    onClick,\n    isDisabled,\n    isFocusable,\n    type = \"radio\",\n    isChecked,\n    ...rest\n  } = props\n\n  const hookProps = { isDisabled, isFocusable, onClick }\n  const optionsProps = useMenuItem(hookProps, externalRef)\n\n  return {\n    ...rest,\n    ...optionsProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked as React.AriaAttributes[\"aria-checked\"],\n  }\n}\n\nexport interface UseMenuOptionGroupProps {\n  value?: string | string[]\n  defaultValue?: string | string[]\n  type?: \"radio\" | \"checkbox\"\n  onChange?: (value: string | string[]) => void\n  children?: React.ReactNode\n}\n\nexport function useMenuOptionGroup(props: UseMenuOptionGroupProps) {\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange,\n    ...htmlProps\n  } = props\n\n  const isRadio = type === \"radio\"\n\n  const fallback = isRadio ? \"\" : []\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue ?? fallback,\n    value: valueProp,\n    onChange,\n  })\n\n  const handleChange = useCallback(\n    (selectedValue: string) => {\n      if (type === \"radio\" && isString(value)) {\n        setValue(selectedValue)\n      }\n\n      if (type === \"checkbox\" && isArray(value)) {\n        const nextValue = value.includes(selectedValue)\n          ? removeItem(value, selectedValue)\n          : addItem(value, selectedValue)\n\n        setValue(nextValue)\n      }\n    },\n    [value, setValue, type],\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const clones = validChildren.map((child) => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if ((child.type as any).id !== \"MenuItemOption\") return child\n\n    const onClick = (event: MouseEvent) => {\n      handleChange(child.props.value)\n      child.props.onClick?.(event)\n    }\n\n    const isChecked =\n      type === \"radio\"\n        ? child.props.value === value\n        : value.includes(child.props.value)\n\n    return cloneElement(child, {\n      type,\n      onClick,\n      isChecked,\n    })\n  })\n\n  return {\n    ...htmlProps,\n    children: clones,\n  }\n}\n\nexport function useMenuState() {\n  const { isOpen, onClose } = useMenuContext()\n  return { isOpen, onClose }\n}\n"]},"metadata":{},"sourceType":"module"}