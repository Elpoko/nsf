{"ast":null,"code":"import _slicedToArray from \"/Users/tommccarthy/nsf/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\";\nimport { useControllableState, useDisclosure, useEventListener, useFocusOnHide, useId, useIds, useOutsideClick, useShortcut, useUpdateEffect } from \"@chakra-ui/hooks\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { addItem, callAllHandlers, createContext, dataAttr, focus, getNextIndex, getNextItemFromSearch, getPrevIndex, getValidChildren, isArray, isString, mergeRefs, mergeWith, normalizeEventKey, removeItem } from \"@chakra-ui/utils\";\nimport { cloneElement, useCallback, useRef, useState } from \"react\";\n\nvar _createContext = createContext({\n  strict: false,\n  name: \"MenuContext\"\n}),\n    _createContext2 = _slicedToArray(_createContext, 2),\n    MenuProvider = _createContext2[0],\n    useMenuContext = _createContext2[1];\n\nexport { MenuProvider, useMenuContext };\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate it's return value to all children\n */\n\nexport function useMenu(props) {\n  var id = props.id,\n      _props$closeOnSelect = props.closeOnSelect,\n      closeOnSelect = _props$closeOnSelect === void 0 ? true : _props$closeOnSelect,\n      _props$closeOnBlur = props.closeOnBlur,\n      closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur,\n      _props$autoSelect = props.autoSelect,\n      autoSelect = _props$autoSelect === void 0 ? true : _props$autoSelect,\n      _props$placement = props.placement,\n      placementProp = _props$placement === void 0 ? \"bottom-start\" : _props$placement,\n      gutter = props.gutter,\n      _props$fixed = props.fixed,\n      fixed = _props$fixed === void 0 ? true : _props$fixed,\n      preventOverflow = props.preventOverflow,\n      modifiers = props.modifiers,\n      isLazy = props.isLazy;\n\n  var _useDisclosure = useDisclosure(props),\n      isOpen = _useDisclosure.isOpen,\n      onOpen = _useDisclosure.onOpen,\n      onClose = _useDisclosure.onClose,\n      onToggle = _useDisclosure.onToggle;\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n\n\n  var menuRef = useRef(null);\n  var buttonRef = useRef(null);\n  useOutsideClick({\n    ref: menuRef,\n    handler: function handler(event) {\n      var _buttonRef$current;\n\n      if (isOpen && closeOnBlur && !((_buttonRef$current = buttonRef.current) == null ? void 0 : _buttonRef$current.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n\n  var popper = usePopper({\n    placement: placementProp,\n    fixed: fixed,\n    gutter: gutter,\n    preventOverflow: preventOverflow,\n    modifiers: modifiers\n  });\n\n  var _useState = useState(-1),\n      _useState2 = _slicedToArray(_useState, 2),\n      focusedIndex = _useState2[0],\n      setFocusedIndex = _useState2[1];\n  /**\n   * Context to register all menu item nodes\n   */\n\n\n  var domContext = useDescendants();\n  /**\n   * Focus the button when we close the menu\n   */\n\n  useUpdateEffect(function () {\n    if (!isOpen) {\n      setFocusedIndex(-1);\n    }\n  }, [isOpen]);\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen\n  });\n  /**\n   * Generate unique ids for menu's list and button\n   */\n\n  var _useIds = useIds(id, \"menu-button\", \"menu-list\"),\n      _useIds2 = _slicedToArray(_useIds, 2),\n      buttonId = _useIds2[0],\n      menuId = _useIds2[1];\n\n  var openAndFocusMenu = useCallback(function () {\n    onOpen();\n    if (menuRef.current) focus(menuRef.current);\n  }, [onOpen, menuRef]);\n  var openAndFocusFirstItem = useCallback(function () {\n    onOpen();\n    setFocusedIndex(0);\n  }, [onOpen, setFocusedIndex]);\n  var openAndFocusLastItem = useCallback(function () {\n    onOpen();\n    setFocusedIndex(domContext.descendants.length - 1);\n  }, [onOpen, setFocusedIndex, domContext.descendants]);\n\n  var refocus = function refocus() {\n    var _menuRef$current;\n\n    var hasFocusWithin = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(document.activeElement);\n    var shouldRefocus = isOpen && !hasFocusWithin;\n    if (!shouldRefocus) return;\n    requestAnimationFrame(function () {\n      var _domContext$descendan;\n\n      var el = (_domContext$descendan = domContext.descendants[focusedIndex]) == null ? void 0 : _domContext$descendan.element;\n      el == null ? void 0 : el.focus({\n        preventScroll: true\n      });\n    });\n  };\n\n  useEventListener(\"transitionend\", refocus, menuRef.current);\n\n  var onTransitionEnd = function onTransitionEnd() {\n    var _menuRef$current2;\n    /**\n     * If we use CSS for transitioning this component, there would be no\n     * need to dispatch a custom event. This is only useful for JS only\n     * motion libraries like `framer-motion` to `react-spring`.\n     *\n     * They usually provide an `onRest` or `onAnimationComplete` callback we can\n     * use to trigger the custom `transitionend` event.\n     */\n\n\n    (_menuRef$current2 = menuRef.current) == null ? void 0 : _menuRef$current2.dispatchEvent(new Event(\"transitionend\"));\n  };\n\n  return {\n    openAndFocusMenu: openAndFocusMenu,\n    openAndFocusFirstItem: openAndFocusFirstItem,\n    openAndFocusLastItem: openAndFocusLastItem,\n    onTransitionEnd: onTransitionEnd,\n    domContext: domContext,\n    popper: popper,\n    buttonId: buttonId,\n    menuId: menuId,\n    orientation: \"vertical\",\n    isOpen: isOpen,\n    onToggle: onToggle,\n    onOpen: onOpen,\n    onClose: onClose,\n    menuRef: menuRef,\n    buttonRef: buttonRef,\n    focusedIndex: focusedIndex,\n    closeOnSelect: closeOnSelect,\n    closeOnBlur: closeOnBlur,\n    autoSelect: autoSelect,\n    setFocusedIndex: setFocusedIndex,\n    isLazy: isLazy\n  };\n}\nexport function useMenuList(props, ref) {\n  if (ref === void 0) {\n    ref = null;\n  }\n\n  var menu = useMenuContext();\n\n  if (!menu) {\n    throw new Error(\"useMenuContext: context is undefined. Seems you forgot the component within <Menu>\");\n  }\n\n  var focusedIndex = menu.focusedIndex,\n      setFocusedIndex = menu.setFocusedIndex,\n      menuRef = menu.menuRef,\n      isOpen = menu.isOpen,\n      onClose = menu.onClose,\n      menuId = menu.menuId,\n      popper = menu.popper,\n      descendants = menu.domContext.descendants,\n      isLazy = menu.isLazy;\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n\n  var onCharacterPress = useShortcut({\n    preventDefault: function preventDefault(event) {\n      return event.key !== \" \";\n    }\n  });\n  var onKeyDown = useCallback(function (event) {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Tab: function Tab(event) {\n        event.preventDefault();\n      },\n      Escape: onClose,\n      ArrowDown: function ArrowDown() {\n        var nextIndex = getNextIndex(focusedIndex, descendants.length);\n        setFocusedIndex(nextIndex);\n      },\n      ArrowUp: function ArrowUp() {\n        var prevIndex = getPrevIndex(focusedIndex, descendants.length);\n        setFocusedIndex(prevIndex);\n      }\n    };\n    var handler = keyMap[eventKey];\n\n    if (handler) {\n      event.preventDefault();\n      handler(event);\n      return;\n    }\n\n    var characterHandler = onCharacterPress(function (character) {\n      /**\n       * Typeahead: Based on current character pressed,\n       * find the next item to be selected\n       */\n      var nextItem = getNextItemFromSearch(descendants, character, function (node) {\n        var _node$element;\n\n        return ((_node$element = node.element) == null ? void 0 : _node$element.textContent) || \"\";\n      }, descendants[focusedIndex]);\n\n      if (nextItem) {\n        var index = descendants.indexOf(nextItem);\n        setFocusedIndex(index);\n      }\n    });\n    characterHandler(event);\n  }, [descendants, focusedIndex, onCharacterPress, onClose, setFocusedIndex]);\n\n  var menulistProps = _extends({}, props, {\n    ref: mergeRefs(menuRef, ref),\n    children: !isLazy || isOpen ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: _extends({}, props.style, {\n      transformOrigin: popper.transformOrigin\n    }),\n    \"aria-orientation\": \"vertical\",\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n\n  return menulistProps;\n}\nexport function useMenuPositioner(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _useMenuContext = useMenuContext(),\n      popper = _useMenuContext.popper,\n      isOpen = _useMenuContext.isOpen;\n\n  return mergeWith(popper.getPopperProps(props), {\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\"\n    }\n  });\n}\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and it's return value\n * is passed as `context` to this hook.\n */\n\nexport function useMenuButton(props, externalRef) {\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var menu = useMenuContext();\n  var isOpen = menu.isOpen,\n      onClose = menu.onClose,\n      autoSelect = menu.autoSelect,\n      popper = menu.popper,\n      openAndFocusFirstItem = menu.openAndFocusFirstItem,\n      openAndFocusLastItem = menu.openAndFocusLastItem,\n      openAndFocusMenu = menu.openAndFocusMenu;\n  var onClick = useCallback(function () {\n    if (isOpen) {\n      onClose();\n    } else {\n      var action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu;\n      action();\n    }\n  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu]);\n  var onKeyDown = useCallback(function (event) {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      Enter: openAndFocusFirstItem,\n      ArrowDown: openAndFocusFirstItem,\n      ArrowUp: openAndFocusLastItem\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n    }\n  }, [openAndFocusFirstItem, openAndFocusLastItem]);\n\n  var buttonProps = _extends({}, props, {\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\",\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onClick),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  });\n\n  return popper.getReferenceProps(buttonProps, mergeRefs(menu.buttonRef, externalRef));\n}\nexport function useMenuItem(props, externalRef) {\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var onClickProp = props.onClick,\n      isDisabled = props.isDisabled,\n      isFocusable = props.isFocusable,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onMouseOut\", \"onClick\", \"isDisabled\", \"isFocusable\"]);\n\n  var menu = useMenuContext();\n  var domContext = menu.domContext,\n      setFocusedIndex = menu.setFocusedIndex,\n      focusedIndex = menu.focusedIndex,\n      closeOnSelect = menu.closeOnSelect,\n      onClose = menu.onClose,\n      menuRef = menu.menuRef;\n  var ref = useRef(null);\n  var id = \"menuitem-\" + useId();\n  /**\n   * Register the menuitem's node into the domContext\n   */\n\n  var index = useDescendant({\n    element: ref.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable\n  });\n  var onMouseEnter = useCallback(function () {\n    if (isDisabled) return;\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index, isDisabled]);\n  var onMouseMove = useCallback(function () {\n    if (document.activeElement !== ref.current) {\n      onMouseEnter();\n    }\n  }, [onMouseEnter]);\n  var onMouseLeave = useCallback(function () {\n    if (isDisabled) return;\n    setFocusedIndex(-1);\n  }, [setFocusedIndex, isDisabled]);\n  var onClick = useCallback(function (event) {\n    onClickProp == null ? void 0 : onClickProp(event);\n    /**\n     * Close menu and parent menu's if `closeOnSelect` is set to `true`\n     */\n\n    if (closeOnSelect) {\n      onClose();\n    }\n  }, [onClose, onClickProp, closeOnSelect]);\n  var isFocused = index === focusedIndex;\n  var trulyDisabled = isDisabled && !isFocusable;\n  useUpdateEffect(function () {\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current);\n    } else if (document.activeElement !== menuRef.current) {\n      var _menuRef$current3;\n\n      (_menuRef$current3 = menuRef.current) == null ? void 0 : _menuRef$current3.focus();\n    }\n  }, [isFocused, trulyDisabled, menuRef]);\n  var tabbable = useClickable({\n    onClick: onClick,\n    onMouseEnter: onMouseEnter,\n    onMouseMove: onMouseMove,\n    onMouseLeave: onMouseLeave,\n    ref: mergeRefs(ref, externalRef),\n    isDisabled: isDisabled,\n    isFocusable: isFocusable\n  });\n  return _extends({}, htmlProps, tabbable, {\n    id: id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1\n  });\n}\nexport function useMenuOption(props, externalRef) {\n  if (externalRef === void 0) {\n    externalRef = null;\n  }\n\n  var onClick = props.onClick,\n      isDisabled = props.isDisabled,\n      isFocusable = props.isFocusable,\n      _props$type = props.type,\n      type = _props$type === void 0 ? \"radio\" : _props$type,\n      isChecked = props.isChecked,\n      rest = _objectWithoutPropertiesLoose(props, [\"onMouseOut\", \"onClick\", \"isDisabled\", \"isFocusable\", \"type\", \"isChecked\"]);\n\n  var hookProps = {\n    isDisabled: isDisabled,\n    isFocusable: isFocusable,\n    onClick: onClick\n  };\n  var optionsProps = useMenuItem(hookProps, externalRef);\n  return _extends({}, rest, optionsProps, {\n    role: \"menuitem\" + type,\n    \"aria-checked\": isChecked\n  });\n}\nexport function useMenuOptionGroup(props) {\n  var children = props.children,\n      _props$type2 = props.type,\n      type = _props$type2 === void 0 ? \"radio\" : _props$type2,\n      valueProp = props.value,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"children\", \"type\", \"value\", \"defaultValue\", \"onChange\"]);\n\n  var isRadio = type === \"radio\";\n  var fallback = isRadio ? \"\" : [];\n\n  var _useControllableState = useControllableState({\n    defaultValue: defaultValue != null ? defaultValue : fallback,\n    value: valueProp,\n    onChange: onChange\n  }),\n      _useControllableState2 = _slicedToArray(_useControllableState, 2),\n      value = _useControllableState2[0],\n      setValue = _useControllableState2[1];\n\n  var handleChange = useCallback(function (selectedValue) {\n    if (type === \"radio\" && isString(value)) {\n      setValue(selectedValue);\n    }\n\n    if (type === \"checkbox\" && isArray(value)) {\n      var nextValue = value.includes(selectedValue) ? removeItem(value, selectedValue) : addItem(value, selectedValue);\n      setValue(nextValue);\n    }\n  }, [value, setValue, type]);\n  var validChildren = getValidChildren(children);\n  var clones = validChildren.map(function (child) {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if (child.type.id !== \"MenuItemOption\") return child;\n\n    var onClick = function onClick(event) {\n      handleChange(child.props.value);\n      child.props.onClick == null ? void 0 : child.props.onClick(event);\n    };\n\n    var isChecked = type === \"radio\" ? child.props.value === value : value.includes(child.props.value);\n    return /*#__PURE__*/cloneElement(child, {\n      type: type,\n      onClick: onClick,\n      isChecked: isChecked\n    });\n  });\n  return _extends({}, htmlProps, {\n    children: clones\n  });\n}\nexport function useMenuState() {\n  var _useMenuContext2 = useMenuContext(),\n      isOpen = _useMenuContext2.isOpen,\n      onClose = _useMenuContext2.onClose;\n\n  return {\n    isOpen: isOpen,\n    onClose: onClose\n  };\n}","map":{"version":3,"sources":["../../src/use-menu.ts"],"names":["createContext","strict","name","closeOnSelect","closeOnBlur","autoSelect","placement","placementProp","fixed","isLazy","onToggle","useDisclosure","menuRef","useRef","buttonRef","useOutsideClick","ref","handler","event","isOpen","onClose","popper","usePopper","gutter","preventOverflow","modifiers","useState","domContext","useDescendants","useUpdateEffect","setFocusedIndex","useFocusOnHide","focusRef","visible","useIds","openAndFocusMenu","useCallback","onOpen","focus","openAndFocusFirstItem","openAndFocusLastItem","refocus","hasFocusWithin","document","shouldRefocus","requestAnimationFrame","el","preventScroll","useEventListener","onTransitionEnd","buttonId","menuId","orientation","focusedIndex","menu","useMenuContext","descendants","onCharacterPress","useShortcut","preventDefault","onKeyDown","eventKey","normalizeEventKey","keyMap","Tab","Escape","ArrowDown","nextIndex","getNextIndex","ArrowUp","prevIndex","getPrevIndex","characterHandler","character","nextItem","getNextItemFromSearch","node","index","menulistProps","mergeRefs","children","props","tabIndex","role","id","style","transformOrigin","callAllHandlers","mergeWith","visibility","externalRef","onClick","action","Enter","buttonProps","dataAttr","isFocusable","useId","useDescendant","element","context","disabled","focusable","onMouseEnter","onMouseMove","onMouseLeave","onClickProp","isFocused","trulyDisabled","isDisabled","tabbable","useClickable","type","isChecked","hookProps","optionsProps","useMenuItem","value","onChange","isRadio","fallback","useControllableState","defaultValue","handleChange","selectedValue","isString","setValue","isArray","nextValue","removeItem","addItem","validChildren","getValidChildren","clones","child","cloneElement"],"mappings":"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","sourcesContent":["import { useClickable } from \"@chakra-ui/clickable\"\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useDisclosure,\n  useEventListener,\n  useFocusOnHide,\n  useId,\n  useIds,\n  useOutsideClick,\n  useShortcut,\n  useUpdateEffect,\n} from \"@chakra-ui/hooks\"\nimport { usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport {\n  addItem,\n  callAllHandlers,\n  createContext,\n  dataAttr,\n  EventKeyMap,\n  focus,\n  getNextIndex,\n  getNextItemFromSearch,\n  getPrevIndex,\n  getValidChildren,\n  isArray,\n  isString,\n  mergeRefs,\n  mergeWith,\n  normalizeEventKey,\n  removeItem,\n} from \"@chakra-ui/utils\"\nimport React, {\n  cloneElement,\n  HTMLAttributes,\n  MouseEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\n\nconst [MenuProvider, useMenuContext] = createContext<UseMenuReturn>({\n  strict: false,\n  name: \"MenuContext\",\n})\n\nexport { MenuProvider, useMenuContext }\n\nexport interface UseMenuProps extends UsePopperProps {\n  /**\n   * Unique id to be used by menu and it's children\n   */\n  id?: string\n  /**\n   * If `true`, the menu will close when a menu item is\n   * clicked\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n  /**\n   * If `true`, the menu will close when you click outside\n   * the menu list\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the first enabled menu item will be selected\n   * when the menu opens.\n   *\n   * @default true\n   */\n  autoSelect?: boolean\n  /**\n   * The Popper.js modifiers to use\n   */\n  modifiers?: UsePopperProps[\"modifiers\"]\n  /**\n   * Performance 🚀:\n   * If `true`, the MenuItem rendering will be deferred\n   * until the menu is open.\n   */\n  isLazy?: boolean\n  /**\n   * If `true`, the top-level menu will be opened in controlled mode\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the top-level menu will be opened in un-controlled mode\n   */\n  defaultIsOpen?: boolean\n  /**\n   * Function to be called when menu is open\n   */\n  onOpen?: () => void\n  /**\n   * Function to be called when menu is closed\n   */\n  onClose?: () => void\n}\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate it's return value to all children\n */\nexport function useMenu(props: UseMenuProps) {\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    autoSelect = true,\n    placement: placementProp = \"bottom-start\",\n    gutter,\n    fixed = true,\n    preventOverflow,\n    modifiers,\n    isLazy,\n  } = props\n\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure(props)\n\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n  const menuRef = useRef<HTMLDivElement>(null)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n\n  useOutsideClick({\n    ref: menuRef,\n    handler: (event) => {\n      if (\n        isOpen &&\n        closeOnBlur &&\n        !buttonRef.current?.contains(event.target as HTMLElement)\n      ) {\n        onClose()\n      }\n    },\n  })\n\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n  const popper = usePopper({\n    placement: placementProp,\n    fixed,\n    gutter,\n    preventOverflow,\n    modifiers,\n  })\n\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  /**\n   * Context to register all menu item nodes\n   */\n  const domContext = useDescendants<HTMLDivElement, {}>()\n\n  /**\n   * Focus the button when we close the menu\n   */\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1)\n    }\n  }, [isOpen])\n\n  useFocusOnHide(menuRef, { focusRef: buttonRef, visible: isOpen })\n\n  /**\n   * Generate unique ids for menu's list and button\n   */\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`)\n\n  const openAndFocusMenu = useCallback(() => {\n    onOpen()\n    if (menuRef.current) focus(menuRef.current)\n  }, [onOpen, menuRef])\n\n  const openAndFocusFirstItem = useCallback(() => {\n    onOpen()\n    setFocusedIndex(0)\n  }, [onOpen, setFocusedIndex])\n\n  const openAndFocusLastItem = useCallback(() => {\n    onOpen()\n    setFocusedIndex(domContext.descendants.length - 1)\n  }, [onOpen, setFocusedIndex, domContext.descendants])\n\n  const refocus = () => {\n    const hasFocusWithin = menuRef.current?.contains(document.activeElement)\n    const shouldRefocus = isOpen && !hasFocusWithin\n    if (!shouldRefocus) return\n    requestAnimationFrame(() => {\n      const el = domContext.descendants[focusedIndex]?.element\n      el?.focus({ preventScroll: true })\n    })\n  }\n\n  useEventListener(\"transitionend\", refocus, menuRef.current)\n\n  const onTransitionEnd = () => {\n    /**\n     * If we use CSS for transitioning this component, there would be no\n     * need to dispatch a custom event. This is only useful for JS only\n     * motion libraries like `framer-motion` to `react-spring`.\n     *\n     * They usually provide an `onRest` or `onAnimationComplete` callback we can\n     * use to trigger the custom `transitionend` event.\n     */\n    menuRef.current?.dispatchEvent(new Event(\"transitionend\"))\n  }\n\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd,\n    domContext,\n    popper,\n    buttonId,\n    menuId,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n  }\n}\n\nexport interface UseMenuReturn extends ReturnType<typeof useMenu> {}\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and it's return value\n * is passed as `context` to this hook.\n */\n\nexport interface UseMenuListProps\n  extends Omit<HTMLAttributes<Element>, \"color\"> {}\n\nexport function useMenuList(\n  props: UseMenuListProps,\n  ref: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  if (!menu) {\n    throw new Error(\n      `useMenuContext: context is undefined. Seems you forgot the component within <Menu>`,\n    )\n  }\n\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    popper,\n    domContext: { descendants },\n    isLazy,\n  } = menu\n\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n  const onCharacterPress = useShortcut({\n    preventDefault: (event) => event.key !== \" \",\n  })\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Tab: (event) => {\n          event.preventDefault()\n        },\n        Escape: onClose,\n        ArrowDown: () => {\n          const nextIndex = getNextIndex(focusedIndex, descendants.length)\n          setFocusedIndex(nextIndex)\n        },\n        ArrowUp: () => {\n          const prevIndex = getPrevIndex(focusedIndex, descendants.length)\n          setFocusedIndex(prevIndex)\n        },\n      }\n\n      const handler = keyMap[eventKey]\n\n      if (handler) {\n        event.preventDefault()\n        handler(event)\n        return\n      }\n\n      const characterHandler = onCharacterPress((character) => {\n        /**\n         * Typeahead: Based on current character pressed,\n         * find the next item to be selected\n         */\n        const nextItem = getNextItemFromSearch(\n          descendants,\n          character,\n          (node) => node.element?.textContent || \"\",\n          descendants[focusedIndex],\n        )\n\n        if (nextItem) {\n          const index = descendants.indexOf(nextItem)\n          setFocusedIndex(index)\n        }\n      })\n\n      characterHandler(event)\n    },\n    [descendants, focusedIndex, onCharacterPress, onClose, setFocusedIndex],\n  )\n\n  const menulistProps: any = {\n    ...props,\n    ref: mergeRefs(menuRef, ref),\n    children: !isLazy || isOpen ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: {\n      ...props.style,\n      transformOrigin: popper.transformOrigin,\n    },\n    \"aria-orientation\": \"vertical\" as React.AriaAttributes[\"aria-orientation\"],\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n\n  return menulistProps\n}\n\nexport function useMenuPositioner(props: any = {}) {\n  const { popper, isOpen } = useMenuContext()\n  return mergeWith(popper.getPopperProps(props), {\n    style: { visibility: isOpen ? \"visible\" : \"hidden\" },\n  })\n}\n\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and it's return value\n * is passed as `context` to this hook.\n */\n\nexport interface UseMenuButtonProps\n  extends Omit<HTMLAttributes<Element>, \"color\"> {}\n\nexport function useMenuButton(\n  props: UseMenuButtonProps,\n  externalRef: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  const {\n    isOpen,\n    onClose,\n    autoSelect,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    openAndFocusMenu,\n  } = menu\n\n  const onClick = useCallback(() => {\n    if (isOpen) {\n      onClose()\n    } else {\n      const action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu\n      action()\n    }\n  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu])\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        Enter: openAndFocusFirstItem,\n        ArrowDown: openAndFocusFirstItem,\n        ArrowUp: openAndFocusLastItem,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n      }\n    },\n    [openAndFocusFirstItem, openAndFocusLastItem],\n  )\n\n  const buttonProps = {\n    ...props,\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\" as React.AriaAttributes[\"aria-haspopup\"],\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onClick),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n\n  return popper.getReferenceProps(\n    buttonProps,\n    mergeRefs(menu.buttonRef, externalRef),\n  )\n}\n\nexport interface UseMenuItemProps\n  extends Omit<HTMLAttributes<Element>, \"color\"> {\n  isDisabled?: boolean\n  isFocusable?: boolean\n}\n\nexport function useMenuItem(\n  props: UseMenuItemProps,\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onMouseOut: onMouseOutProp,\n    onClick: onClickProp,\n    isDisabled,\n    isFocusable,\n    ...htmlProps\n  } = props\n\n  const menu = useMenuContext()\n\n  const {\n    domContext,\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect,\n    onClose,\n    menuRef,\n  } = menu\n\n  const ref = useRef<HTMLDivElement>(null)\n  const id = `menuitem-${useId()}`\n\n  /**\n   * Register the menuitem's node into the domContext\n   */\n  const index = useDescendant({\n    element: ref.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable,\n  })\n\n  const onMouseEnter = useCallback(() => {\n    if (isDisabled) return\n    setFocusedIndex(index)\n  }, [setFocusedIndex, index, isDisabled])\n\n  const onMouseMove = useCallback(() => {\n    if (document.activeElement !== ref.current) {\n      onMouseEnter()\n    }\n  }, [onMouseEnter])\n\n  const onMouseLeave = useCallback(() => {\n    if (isDisabled) return\n    setFocusedIndex(-1)\n  }, [setFocusedIndex, isDisabled])\n\n  const onClick = useCallback(\n    (event: MouseEvent) => {\n      onClickProp?.(event)\n      /**\n       * Close menu and parent menu's if `closeOnSelect` is set to `true`\n       */\n      if (closeOnSelect) {\n        onClose()\n      }\n    },\n    [onClose, onClickProp, closeOnSelect],\n  )\n\n  const isFocused = index === focusedIndex\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  useUpdateEffect(() => {\n    if (isFocused && !trulyDisabled && ref.current) {\n      focus(ref.current)\n    } else if (document.activeElement !== menuRef.current) {\n      menuRef.current?.focus()\n    }\n  }, [isFocused, trulyDisabled, menuRef])\n\n  const tabbable = useClickable({\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(ref, externalRef),\n    isDisabled,\n    isFocusable,\n  })\n\n  return {\n    ...htmlProps,\n    ...tabbable,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1,\n  }\n}\n\nexport interface UseMenuOptionOptions {\n  value?: string\n  isChecked?: boolean\n  type?: \"radio\" | \"checkbox\"\n  children?: React.ReactNode\n}\n\nexport interface UseMenuOptionProps\n  extends UseMenuItemProps,\n    UseMenuOptionOptions {}\n\nexport function useMenuOption(\n  props: UseMenuOptionProps,\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onMouseOut,\n    onClick,\n    isDisabled,\n    isFocusable,\n    type = \"radio\",\n    isChecked,\n    ...rest\n  } = props\n\n  const hookProps = { isDisabled, isFocusable, onClick }\n  const optionsProps = useMenuItem(hookProps, externalRef)\n\n  return {\n    ...rest,\n    ...optionsProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked as React.AriaAttributes[\"aria-checked\"],\n  }\n}\n\nexport interface UseMenuOptionGroupProps {\n  value?: string | string[]\n  defaultValue?: string | string[]\n  type?: \"radio\" | \"checkbox\"\n  onChange?: (value: string | string[]) => void\n  children?: React.ReactNode\n}\n\nexport function useMenuOptionGroup(props: UseMenuOptionGroupProps) {\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange,\n    ...htmlProps\n  } = props\n\n  const isRadio = type === \"radio\"\n\n  const fallback = isRadio ? \"\" : []\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue ?? fallback,\n    value: valueProp,\n    onChange,\n  })\n\n  const handleChange = useCallback(\n    (selectedValue: string) => {\n      if (type === \"radio\" && isString(value)) {\n        setValue(selectedValue)\n      }\n\n      if (type === \"checkbox\" && isArray(value)) {\n        const nextValue = value.includes(selectedValue)\n          ? removeItem(value, selectedValue)\n          : addItem(value, selectedValue)\n\n        setValue(nextValue)\n      }\n    },\n    [value, setValue, type],\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const clones = validChildren.map((child) => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if ((child.type as any).id !== \"MenuItemOption\") return child\n\n    const onClick = (event: MouseEvent) => {\n      handleChange(child.props.value)\n      child.props.onClick?.(event)\n    }\n\n    const isChecked =\n      type === \"radio\"\n        ? child.props.value === value\n        : value.includes(child.props.value)\n\n    return cloneElement(child, {\n      type,\n      onClick,\n      isChecked,\n    })\n  })\n\n  return {\n    ...htmlProps,\n    children: clones,\n  }\n}\n\nexport function useMenuState() {\n  const { isOpen, onClose } = useMenuContext()\n  return { isOpen, onClose }\n}\n"]},"metadata":{},"sourceType":"module"}