{"version":3,"sources":["../../src/popover.tsx"],"names":["motionVariants","exit","opacity","scale","transition","duration","ease","transitionEnd","visibility","enter","name","errorMessage","PopoverProvider","usePopoverContext","Popover","props","styles","children","rest","context","isOpen","onClose","__DEV__","displayName","PopoverTrigger","child","React","Children","only","getTriggerProps","cloneElement","ref","Motion","motion","section","PopoverContent","getPopoverProps","onTransitionEnd","getPopoverPositionerProps","contentStyles","position","display","flexDirection","content","popoverProps","popper","PopoverHeader","headerId","setHasHeader","useEffect","on","off","className","header","PopoverBody","bodyId","setHasBody","body","PopoverFooter","footer","PopoverCloseButton","PopoverArrow","getArrowProps","getArrowPositionerProps","arrow"],"mappings":"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","sourcesContent":["import { CloseButton, CloseButtonProps } from \"@chakra-ui/close-button\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport {\n  createContext,\n  cx,\n  MaybeRenderProp,\n  runIfFn,\n  __DEV__,\n} from \"@chakra-ui/utils\"\nimport { motion, Variants } from \"framer-motion\"\nimport * as React from \"react\"\nimport { usePopover, UsePopoverProps, UsePopoverReturn } from \"./use-popover\"\n\nconst motionVariants: Variants = {\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    transition: {\n      duration: 0.1,\n      ease: [0.4, 0, 1, 1],\n    },\n    transitionEnd: {\n      visibility: \"hidden\",\n    },\n  },\n  enter: {\n    visibility: \"visible\",\n    scale: 1,\n    opacity: 1,\n    transition: {\n      duration: 0.15,\n      ease: [0, 0, 0.2, 1],\n    },\n  },\n}\n\nconst [PopoverProvider, usePopoverContext] = createContext<UsePopoverReturn>({\n  name: \"PopoverContext\",\n  errorMessage:\n    \"usePopoverContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Popover />`\",\n})\n\nexport { usePopoverContext }\n\nexport interface PopoverProps extends UsePopoverProps, ThemingProps {\n  /**\n   * The content of the popover. It's usually the `PopoverTrigger`,\n   * and `PopoverContent`\n   */\n  children?: MaybeRenderProp<{\n    isOpen: boolean\n    onClose(): void\n  }>\n}\n\n/**\n * Popover is used to bring attention to specific user interface elements,\n * typically to suggest an action or to guide users through a new experience.\n */\nexport const Popover: React.FC<PopoverProps> = (props) => {\n  const styles = useMultiStyleConfig(\"Popover\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const context = usePopover(rest)\n\n  return (\n    <PopoverProvider value={context}>\n      <StylesProvider value={styles}>\n        {runIfFn(children, {\n          isOpen: context.isOpen,\n          onClose: context.onClose,\n        })}\n      </StylesProvider>\n    </PopoverProvider>\n  )\n}\n\nif (__DEV__) {\n  Popover.displayName = \"Popover\"\n}\n\n/**\n * PopoverTrigger opens the popover's content. It must be an interactive element\n * such as `button` or `a`.\n */\nexport const PopoverTrigger: React.FC = (props) => {\n  // enforce a single child\n  const child: any = React.Children.only(props.children)\n  const { getTriggerProps } = usePopoverContext()\n  return React.cloneElement(child, getTriggerProps(child.props, child.ref))\n}\n\nif (__DEV__) {\n  PopoverTrigger.displayName = \"PopoverTrigger\"\n}\n\nexport interface PopoverContentProps extends HTMLChakraProps<\"section\"> {}\n\nconst Motion = chakra(motion.section)\n\nexport const PopoverContent = forwardRef<PopoverContentProps, \"section\">(\n  function PopoverContent(props, ref) {\n    const {\n      isOpen,\n      getPopoverProps,\n      onTransitionEnd,\n      getPopoverPositionerProps,\n    } = usePopoverContext()\n\n    const styles = useStyles()\n    const contentStyles: SystemStyleObject = {\n      position: \"relative\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      ...styles.content,\n    }\n\n    const popoverProps: any = getPopoverProps(props, ref)\n\n    return (\n      <chakra.div __css={styles.popper} {...getPopoverPositionerProps()}>\n        <Motion\n          {...popoverProps}\n          onUpdate={onTransitionEnd}\n          className={cx(\"chakra-popover__content\")}\n          __css={contentStyles}\n          variants={motionVariants}\n          initial={false}\n          animate={isOpen ? \"enter\" : \"exit\"}\n        />\n      </chakra.div>\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverContent.displayName = \"PopoverContent\"\n}\n\nexport interface PopoverHeaderProps extends HTMLChakraProps<\"header\"> {}\n\n/**\n * PopoverHeader is the accessible header or label\n * for the popover's content and it's first announced by screenreaders.\n */\nexport const PopoverHeader = forwardRef<PopoverHeaderProps, \"header\">(\n  function PopoverHeader(props, ref) {\n    const { headerId, setHasHeader } = usePopoverContext()\n\n    React.useEffect(() => {\n      setHasHeader.on()\n      return () => setHasHeader.off()\n    }, [setHasHeader])\n\n    const styles = useStyles()\n\n    return (\n      <chakra.header\n        {...props}\n        className={cx(\"chakra-popover__header\", props.className)}\n        id={headerId}\n        ref={ref}\n        __css={styles.header}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverHeader.displayName = \"PopoverHeader\"\n}\n\nexport interface PopoverBodyProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * PopoverBody is the main content area for the popover. Should contain\n * at least one interactive element.\n */\nexport const PopoverBody = forwardRef<PopoverBodyProps, \"div\">(\n  function PopoverBody(props, ref) {\n    const { bodyId, setHasBody } = usePopoverContext()\n\n    React.useEffect(() => {\n      setHasBody.on()\n      return () => setHasBody.off()\n    }, [setHasBody])\n\n    const styles = useStyles()\n\n    return (\n      <chakra.div\n        {...props}\n        className={cx(\"chakra-popover__body\", props.className)}\n        id={bodyId}\n        ref={ref}\n        __css={styles.body}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PopoverBody.displayName = \"PopoverBody\"\n}\nexport interface PopoverFooterProps extends HTMLChakraProps<\"footer\"> {}\n\nexport const PopoverFooter: React.FC<PopoverFooterProps> = (props) => {\n  const styles = useStyles()\n  return (\n    <chakra.footer\n      {...props}\n      className={cx(\"chakra-popover__footer\", props.className)}\n      __css={styles.footer}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverFooter.displayName = \"PopoverFooter\"\n}\n\nexport type PopoverCloseButtonProps = CloseButtonProps\n\nexport const PopoverCloseButton: React.FC<CloseButtonProps> = (props) => {\n  const { onClose } = usePopoverContext()\n  return (\n    <CloseButton\n      size=\"sm\"\n      onClick={onClose}\n      position=\"absolute\"\n      borderRadius=\"md\"\n      top=\"0.25rem\"\n      right=\"0.5rem\"\n      padding=\"0.5rem\"\n      {...props}\n    />\n  )\n}\n\nif (__DEV__) {\n  PopoverCloseButton.displayName = \"PopoverCloseButton\"\n}\n\nexport interface PopoverArrowProps extends HTMLChakraProps<\"div\"> {}\n\nexport const PopoverArrow: React.FC<PopoverArrowProps> = (props) => {\n  const { getArrowProps, getArrowPositionerProps } = usePopoverContext()\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      {...getArrowPositionerProps()}\n      className={cx(\"chakra-popover__arrow-positioner\", props.className)}\n    >\n      <chakra.div\n        className={cx(\"chakra-popover__arrow\", props.className)}\n        {...getArrowProps(props)}\n        __css={styles.arrow}\n      />\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  PopoverArrow.displayName = \"PopoverArrow\"\n}\n"],"file":"popover.js"}