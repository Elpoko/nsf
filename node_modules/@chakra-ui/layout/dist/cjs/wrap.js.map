{"version":3,"sources":["../../src/wrap.tsx"],"names":["Wrap","props","ref","spacing","children","justify","direction","align","rest","theme","itemSpacing","value","margin","groupSpacing","groupStyles","display","flexWrap","justifyContent","alignItems","flexDirection","listStyleType","padding","itemStyles","item","__DEV__","displayName","WrapItem","styles"],"mappings":";;;;;AAAA;;AAWA;;AACA;;;;;;;;;;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,IAAI,gBAAG,wBAA6B,SAASA,IAAT,CAAcC,KAAd,EAAqBC,GAArB,EAA0B;AAAA,uBAQrED,KARqE,CAEvEE,OAFuE;AAAA,MAEvEA,OAFuE,+BAE7D,QAF6D;AAAA,MAGvEC,QAHuE,GAQrEH,KARqE,CAGvEG,QAHuE;AAAA,MAIvEC,OAJuE,GAQrEJ,KARqE,CAIvEI,OAJuE;AAAA,MAKvEC,SALuE,GAQrEL,KARqE,CAKvEK,SALuE;AAAA,MAMvEC,KANuE,GAQrEN,KARqE,CAMvEM,KANuE;AAAA,MAOpEC,IAPoE,iCAQrEP,KARqE;;AAUzE,MAAMQ,KAAK,GAAG,uBAAd;AAEA,MAAMC,WAAW,GAAG,0BAAcP,OAAd,EAAuB,UAACQ,KAAD,EAAW;AAAA,eACjC,iBAAI;AAAEC,MAAAA,MAAM,EAAED;AAAV,KAAJ,EAAuBF,KAAvB,CADiC;AAAA,QAC5CG,MAD4C,QAC5CA,MAD4C;;AAEpD,qBAAeA,MAAf;AACD,GAHmB,CAApB;AAKA,MAAMC,YAAY,GAAG,0BAAcV,OAAd,EAAuB,UAACQ,KAAD,EAAW;AAAA,gBAClC,iBAAI;AAAEC,MAAAA,MAAM,EAAED;AAAV,KAAJ,EAAuBF,KAAvB,CADkC;AAAA,QAC7CG,MAD6C,SAC7CA,MAD6C;;AAErD,qBAAeA,MAAf;AACD,GAHoB,CAArB;AAKA,MAAME,WAA8B,GAAG;AACrCC,IAAAA,OAAO,EAAE,MAD4B;AAErCC,IAAAA,QAAQ,EAAE,MAF2B;AAGrCC,IAAAA,cAAc,EAAEZ,OAHqB;AAIrCa,IAAAA,UAAU,EAAEX,KAJyB;AAKrCY,IAAAA,aAAa,EAAEb,SALsB;AAMrCc,IAAAA,aAAa,EAAE,MANsB;AAOrCC,IAAAA,OAAO,EAAE,GAP4B;AAQrCT,IAAAA,MAAM,EAAEC;AAR6B,GAAvC;AAWA,MAAMS,UAA6B,GAAG;AACpCV,IAAAA,MAAM,EAAEF;AAD4B,GAAtC;AAIA,sBACE,oBAAC,sBAAD;AAAgB,IAAA,KAAK,EAAE;AAAEa,MAAAA,IAAI,EAAED;AAAR;AAAvB,kBACE,oBAAC,cAAD,CAAQ,GAAR;AAAY,IAAA,GAAG,EAAEpB;AAAjB,KAA0BM,IAA1B,gBACE,oBAAC,cAAD,CAAQ,EAAR;AAAW,IAAA,KAAK,EAAEM;AAAlB,KAAgCV,QAAhC,CADF,CADF,CADF;AAOD,CA5CmB,CAAb;;;AA8CP,IAAIoB,cAAJ,EAAa;AACXxB,EAAAA,IAAI,CAACyB,WAAL,GAAmB,MAAnB;AACD;;AAIM,IAAMC,QAAQ,gBAAG,wBAAgC,SAASA,QAAT,CACtDzB,KADsD,EAEtDC,GAFsD,EAGtD;AACA,MAAMyB,MAAM,GAAG,wBAAf;AACA,sBAAO,oBAAC,cAAD,CAAQ,EAAR;AAAW,IAAA,GAAG,EAAEzB,GAAhB;AAAqB,IAAA,KAAK,EAAEyB,MAAM,CAACJ;AAAnC,KAA6CtB,KAA7C,EAAP;AACD,CANuB,CAAjB;;;AAQP,IAAIuB,cAAJ,EAAa;AACXE,EAAAA,QAAQ,CAACD,WAAT,GAAuB,UAAvB;AACD","sourcesContent":["import {\n  chakra,\n  css,\n  forwardRef,\n  StylesProvider,\n  SystemProps,\n  SystemStyleObject,\n  useStyles,\n  useTheme,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { mapResponsive, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface WrapProps extends HTMLChakraProps<\"div\"> {\n  /**\n   * The space between the each child (even if it wraps)\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The `justify-content` value (for cross-axis alignment)\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * The `align-items` value (for main axis alignment)\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * The `flex-direction` value\n   */\n  direction?: SystemProps[\"flexDirection\"]\n}\n\n/**\n * Layout component used to stack elements that differ in length\n * and are liable to wrap.\n *\n * Common use cases:\n * - Buttons that appear together at the end of forms\n * - Lists of tags and chips\n *\n * @see Docs https://chakra-ui.com/components/wrap\n */\nexport const Wrap = forwardRef<WrapProps, \"div\">(function Wrap(props, ref) {\n  const {\n    spacing = \"0.5rem\",\n    children,\n    justify,\n    direction,\n    align,\n    ...rest\n  } = props\n\n  const theme = useTheme()\n\n  const itemSpacing = mapResponsive(spacing, (value) => {\n    const { margin } = css({ margin: value })(theme)\n    return `calc(${margin} / 2)`\n  })\n\n  const groupSpacing = mapResponsive(spacing, (value) => {\n    const { margin } = css({ margin: value })(theme)\n    return `calc(${margin} / 2 * -1)`\n  })\n\n  const groupStyles: SystemStyleObject = {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: justify,\n    alignItems: align,\n    flexDirection: direction,\n    listStyleType: \"none\",\n    padding: \"0\",\n    margin: groupSpacing,\n  }\n\n  const itemStyles: SystemStyleObject = {\n    margin: itemSpacing,\n  }\n\n  return (\n    <StylesProvider value={{ item: itemStyles }}>\n      <chakra.div ref={ref} {...rest}>\n        <chakra.ul __css={groupStyles}>{children}</chakra.ul>\n      </chakra.div>\n    </StylesProvider>\n  )\n})\n\nif (__DEV__) {\n  Wrap.displayName = \"Wrap\"\n}\n\nexport interface WrapItemProps extends HTMLChakraProps<\"li\"> {}\n\nexport const WrapItem = forwardRef<WrapItemProps, \"li\">(function WrapItem(\n  props,\n  ref,\n) {\n  const styles = useStyles()\n  return <chakra.li ref={ref} __css={styles.item} {...props} />\n})\n\nif (__DEV__) {\n  WrapItem.displayName = \"WrapItem\"\n}\n"],"file":"wrap.js"}