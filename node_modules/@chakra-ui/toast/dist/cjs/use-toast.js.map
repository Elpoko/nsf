{"version":3,"sources":["../../src/use-toast.tsx"],"names":["Toast","props","status","variant","id","title","isClosable","onClose","description","defaults","duration","position","defaultStandaloneParam","theme","defaultTheme","colorMode","toggleColorMode","noop","setColorMode","createStandaloneToast","renderWithProviders","options","render","toastImpl","opts","Message","toast","notify","close","closeAll","update","rest","message","isActive","useToast","React","useMemo"],"mappings":"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","sourcesContent":["import type { AlertStatus } from \"@chakra-ui/alert\"\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n} from \"@chakra-ui/alert\"\nimport { CloseButton } from \"@chakra-ui/close-button\"\nimport {\n  chakra,\n  ColorMode,\n  ColorModeContext,\n  ThemeProvider,\n  useChakra,\n} from \"@chakra-ui/system\"\nimport defaultTheme from \"@chakra-ui/theme\"\nimport { isFunction, noop } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { toast } from \"./toast.class\"\nimport { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\n\nexport interface UseToastOptions {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastOptions[\"position\"]\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: string\n  /**\n   * The description of the toast\n   */\n  description?: string\n  /**\n   * If `true`, toast will show a close button\n   */\n  isClosable?: boolean\n  /**\n   * The alert component `variant` to use\n   */\n  variant?: string\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n}\n\nexport type IToast = UseToastOptions\n\nconst Toast: React.FC<any> = (props) => {\n  const { status, variant, id, title, isClosable, onClose, description } = props\n\n  return (\n    <Alert\n      status={status}\n      variant={variant}\n      id={id}\n      alignItems=\"start\"\n      borderRadius=\"md\"\n      boxShadow=\"lg\"\n      paddingRight={8}\n      textAlign=\"left\"\n      width=\"auto\"\n    >\n      <AlertIcon />\n      <chakra.div flex=\"1\">\n        {title && <AlertTitle>{title}</AlertTitle>}\n        {description && (\n          <AlertDescription display=\"block\">{description}</AlertDescription>\n        )}\n      </chakra.div>\n      {isClosable && (\n        <CloseButton\n          size=\"sm\"\n          onClick={onClose}\n          position=\"absolute\"\n          right={1}\n          top={1}\n        />\n      )}\n    </Alert>\n  )\n}\n\nconst defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\",\n} as const\n\nexport type CreateStandAloneToastParam = Partial<\n  {\n    setColorMode: (value: ColorMode) => void\n  } & ReturnType<typeof useChakra>\n>\n\nexport const defaultStandaloneParam: Required<CreateStandAloneToastParam> = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n}\n/**\n * Create a toast from outside of React Components\n */\nexport function createStandaloneToast({\n  theme = defaultStandaloneParam.theme,\n  colorMode = defaultStandaloneParam.colorMode,\n  toggleColorMode = defaultStandaloneParam.toggleColorMode,\n  setColorMode = defaultStandaloneParam.setColorMode,\n}: CreateStandAloneToastParam = defaultStandaloneParam) {\n  const renderWithProviders = (\n    props: React.PropsWithChildren<RenderProps>,\n    options: UseToastOptions,\n  ) => (\n    <ThemeProvider theme={theme}>\n      <ColorModeContext.Provider\n        value={{ colorMode, setColorMode, toggleColorMode }}\n      >\n        {isFunction(options.render) ? (\n          options.render(props)\n        ) : (\n          <Toast {...props} {...options} />\n        )}\n      </ColorModeContext.Provider>\n    </ThemeProvider>\n  )\n\n  const toastImpl = (options: UseToastOptions) => {\n    const opts = { ...defaults, ...options }\n\n    const Message: React.FC<RenderProps> = (props) =>\n      renderWithProviders(props, opts)\n\n    return toast.notify(Message, opts)\n  }\n\n  toastImpl.close = toast.close\n  toastImpl.closeAll = toast.closeAll\n\n  // toasts can only be updated if they have a valid id\n  toastImpl.update = (id: ToastId, options: Omit<UseToastOptions, \"id\">) => {\n    const { render, ...rest } = options\n\n    if (!id) return\n\n    const opts = { ...defaults, ...rest }\n\n    toast.update(id, {\n      ...opts,\n      message: (props) => renderWithProviders(props, opts),\n    })\n  }\n\n  toastImpl.isActive = toast.isActive\n\n  return toastImpl\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast() {\n  const { theme, setColorMode, toggleColorMode, colorMode } = useChakra()\n  return React.useMemo(\n    () =>\n      createStandaloneToast({\n        theme,\n        colorMode,\n        setColorMode,\n        toggleColorMode,\n      }),\n    [theme, setColorMode, toggleColorMode, colorMode],\n  )\n}\n\nexport default useToast\n"],"file":"use-toast.js"}