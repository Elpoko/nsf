{"version":3,"sources":["../../src/use-tabs.ts"],"names":["useTabs","props","defaultIndex","onChange","index","isManual","isLazy","orientation","htmlProps","focusedIndex","setFocusedIndex","defaultValue","value","shouldUpdate","prevIndex","nextIndex","propsMap","selectedIndex","setSelectedIndex","enabledDomContext","domContext","id","name","errorMessage","TabsProvider","useTabsContext","useTabList","count","descendants","length","setIndex","tab","element","focus","onKeyDown","event","nextTab","prevTab","firstTab","lastTab","isHorizontal","isVertical","eventKey","keyMap","ArrowRight","ArrowLeft","ArrowDown","ArrowUp","Home","End","action","preventDefault","role","useTab","isDisabled","isFocusable","ref","enabledIndex","disabled","Boolean","focusable","context","current","isSelected","onClick","onFocus","isDisabledButFocusable","shouldSelect","clickable","type","makeTabId","tabIndex","undefined","makeTabPanelId","useTabPanels","validChildren","children","map","child","useTabPanel","hidden","useTabIndicator","left","width","top","height","rect","setRect","hasMeasured","setHasMeasured","tabRect","getBoundingClientRect","frameId","requestAnimationFrame","cancelAnimationFrame","position","transition"],"mappings":"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","sourcesContent":["import { useClickable, UseClickableProps } from \"@chakra-ui/clickable\"\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useId,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  createContext,\n  Dict,\n  EventKeyMap,\n  getValidChildren,\n  isUndefined,\n  mergeRefs,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport {\n  ButtonHTMLAttributes,\n  cloneElement,\n  CSSProperties,\n  KeyboardEventHandler,\n  ReactElement,\n  ReactNode,\n  Ref,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseTabsProps {\n  /**\n   * The orientation of the tab list.\n   */\n  orientation?: \"vertical\" | \"horizontal\"\n  /**\n   * If `true`, the tabs will be manually activated and\n   * display its panel by pressing Space or Enter.\n   *\n   * If `false`, the tabs will be automatically activated\n   * and their panel is displayed when they receive focus.\n   */\n  isManual?: boolean\n  /**\n   * Callback when the index (controlled or un-controlled) changes.\n   */\n  onChange?: (index: number) => void\n  /**\n   * The index of the selected tab (in controlled mode)\n   */\n  index?: number\n  /**\n   * The initial index of the selected tab (in uncontrolled mode)\n   */\n  defaultIndex?: number\n  /**\n   * The id of the tab\n   */\n  id?: string\n  /**\n   * Performance 🚀:\n   * If `true`, the TabPanel rendering will be deferred\n   * until it is open.\n   */\n  isLazy?: boolean\n}\n\n/**\n * Tabs hooks that provides all the states, and accessibility\n * helpers to keep all things working properly.\n *\n * It's returned object will be passed unto a Context Provider\n * so all child components can read from it.\n *\n * @see Docs https://chakra-ui.com/components/useTabs\n */\nexport function useTabs(props: UseTabsProps) {\n  const {\n    defaultIndex,\n    onChange,\n    index,\n    isManual,\n    isLazy,\n    orientation = \"horizontal\",\n    ...htmlProps\n  } = props\n\n  /**\n   * We use this to keep track of the index of the focused tab.\n   *\n   * Tabs can be automatically activated, this means selection follows focus.\n   * When we navigate with the arrow keys, we move focus and selection to next/prev tab\n   *\n   * Tabs can also be manually activated, this means selection does not follow focus.\n   * When we navigate with the arrow keys, we only move focus NOT selection. The user\n   * will need not manually activate the tab using `Enter` or `Space`.\n   *\n   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`\n   */\n  const [focusedIndex, setFocusedIndex] = useState(defaultIndex ?? 0)\n\n  const [selectedIndex, setSelectedIndex] = useControllableState({\n    defaultValue: defaultIndex ?? 0,\n    value: index,\n    onChange,\n    shouldUpdate: (prevIndex, nextIndex) => prevIndex !== nextIndex,\n    propsMap: {\n      value: \"index\",\n      defaultValue: \"defaultIndex\",\n    },\n  })\n\n  /**\n   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)\n   */\n  useEffect(() => {\n    if (!isUndefined(index)) {\n      setFocusedIndex(index)\n    }\n  }, [index])\n\n  /**\n   * Think of `useDescendants` as a register for the tab nodes.\n   *\n   * This manager is used to store only the tab nodes that are not disabled, and focusable.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\" and \"Tab 3\", since `Tab 2` is disabled\n   */\n  const enabledDomContext = useDescendants()\n\n  /**\n   * This manager is used to store all tab nodes whether disabled or not.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\", \"Tab 2\" \"Tab 3\".\n   *\n   * We need this for correct indexing of tabs in event a tab is disabled\n   */\n  const domContext = useDescendants()\n\n  /**\n   * generate a unique id or use user-provided id for\n   * the tabs widget\n   */\n  const id = useId(props.id, `tabs`)\n\n  return {\n    id,\n    selectedIndex,\n    focusedIndex,\n    setSelectedIndex,\n    setFocusedIndex,\n    isManual,\n    isLazy,\n    orientation,\n    enabledDomContext,\n    domContext,\n    htmlProps,\n  }\n}\n\nexport type UseTabsReturn = Omit<ReturnType<typeof useTabs>, \"htmlProps\">\n\nconst [TabsProvider, useTabsContext] = createContext<UseTabsReturn>({\n  name: \"TabsContext\",\n  errorMessage:\n    \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\",\n})\n\nexport { TabsProvider }\n\ntype Child = ReactElement<any>\n\nexport interface UseTabListProps {\n  children?: ReactNode\n  onKeyDown?: KeyboardEventHandler\n  ref?: Ref<any>\n}\n\n/**\n * Tabs hook to manage multiple tab buttons,\n * and ensures only one tab is selected per time.\n *\n * @param props props object for the tablist\n */\nexport function useTabList<P extends UseTabListProps>(props: P) {\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    orientation,\n    enabledDomContext,\n  } = useTabsContext()\n\n  const count = enabledDomContext.descendants.length\n\n  /**\n   * Function to update the selected tab index\n   */\n  const setIndex = useCallback(\n    (index: number) => {\n      const tab = enabledDomContext.descendants[index]\n      if (tab?.element) {\n        tab.element.focus()\n        setFocusedIndex(index)\n      }\n    },\n    [enabledDomContext.descendants, setFocusedIndex],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const nextTab = () => setIndex((focusedIndex + 1) % count)\n      const prevTab = () => setIndex((focusedIndex - 1 + count) % count)\n      const firstTab = () => setIndex(0)\n      const lastTab = () => setIndex(count - 1)\n\n      const isHorizontal = orientation === \"horizontal\"\n      const isVertical = orientation === \"vertical\"\n\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        ArrowRight: () => isHorizontal && nextTab(),\n        ArrowLeft: () => isHorizontal && prevTab(),\n        ArrowDown: () => isVertical && nextTab(),\n        ArrowUp: () => isVertical && prevTab(),\n        Home: firstTab,\n        End: lastTab,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [count, focusedIndex, orientation, setIndex],\n  )\n\n  return {\n    ...props,\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nexport type UseTabListReturn = ReturnType<typeof useTabList>\n\nexport interface UseTabOptions {\n  id?: string\n  isSelected?: boolean\n  panelId?: string\n  /**\n   * If `true`, the `Tab` won't be toggleable\n   */\n  isDisabled?: boolean\n}\n\nexport interface UseTabProps\n  extends Omit<UseClickableProps, \"color\">,\n    UseTabOptions {}\n\n/**\n * Tabs hook to manage each tab button.\n *\n * A tab can be disabled and focusable, or both,\n * hence the use of `useClickable` to handle this scenario\n */\nexport function useTab<P extends UseTabProps>(\n  props: P,\n): ButtonHTMLAttributes<any> {\n  const { isDisabled, isFocusable, ...htmlProps } = props\n\n  const {\n    setSelectedIndex,\n    isManual,\n    id,\n    setFocusedIndex,\n    enabledDomContext,\n    domContext,\n    selectedIndex,\n  } = useTabsContext()\n\n  const ref = useRef<HTMLElement>(null)\n\n  /**\n   * Think of `useDescendant` as the function that registers tab node\n   * to the `enabledDomContext`, and returns it's index.\n   *\n   * Tab is registered if it's enabled or focusable\n   */\n  const enabledIndex = useDescendant({\n    disabled: Boolean(isDisabled),\n    focusable: Boolean(isFocusable),\n    context: enabledDomContext,\n    element: ref.current,\n  })\n\n  /**\n   * Registers all tabs (whether disabled or not)\n   */\n  const index = useDescendant({\n    context: domContext,\n    element: ref.current,\n  })\n\n  const isSelected = index === selectedIndex\n\n  const onClick = () => {\n    setFocusedIndex(enabledIndex)\n    setSelectedIndex(index)\n  }\n\n  const onFocus = () => {\n    const isDisabledButFocusable = isDisabled && isFocusable\n    const shouldSelect = !isManual && !isDisabledButFocusable\n\n    if (shouldSelect) {\n      setSelectedIndex(index)\n    }\n  }\n\n  const clickable = useClickable({\n    ...htmlProps,\n    ref: mergeRefs(ref, props.ref),\n    isDisabled,\n    isFocusable,\n    onClick: callAllHandlers(props.onClick, onClick),\n  })\n\n  const type: \"button\" | \"submit\" | \"reset\" = \"button\"\n\n  return {\n    ...clickable,\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type,\n    \"aria-selected\": isSelected ? true : undefined,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: isDisabled ? undefined : callAllHandlers(props.onFocus, onFocus),\n  }\n}\n\nexport interface UseTabPanelsProps {\n  children?: ReactNode\n}\n\n/**\n * Tabs hook for managing the visibility of multiple tab panels.\n *\n * Since only one panel can be show at a time, we use `cloneElement`\n * to inject `selected` panel to each TabPanel.\n *\n * It returns a cloned version of it's children with\n * all functionality included.\n */\nexport function useTabPanels<P extends UseTabPanelsProps>(props: P) {\n  const context = useTabsContext()\n\n  const { id, selectedIndex } = context\n\n  const validChildren = getValidChildren(props.children)\n\n  const children = validChildren.map((child, index) =>\n    cloneElement(child as Child, {\n      isSelected: index === selectedIndex,\n      id: makeTabPanelId(id, index),\n    }),\n  )\n\n  return { ...props, children }\n}\n\n/**\n * Tabs hook for managing the visible/hidden states\n * of the tab panel.\n *\n * @param props props object for the tab panel\n */\nexport function useTabPanel(props: Dict) {\n  const { isSelected, id, ...htmlProps } = props\n  const { isLazy } = useTabsContext()\n\n  return {\n    ...htmlProps,\n    children: !isLazy || isSelected ? props.children : null,\n    role: \"tabpanel\",\n    hidden: !isSelected,\n    id,\n  }\n}\n\n/**\n * Tabs hook to show an animated indicators that\n * follows the active tab.\n *\n * The way we do it is by measuring the DOM Rect (or dimensions)\n * of the active tab, and return that as CSS style for\n * the indicator.\n */\nexport function useTabIndicator(): CSSProperties {\n  const context = useTabsContext()\n\n  const { selectedIndex, orientation, domContext } = context\n\n  const isHorizontal = orientation === \"horizontal\"\n  const isVertical = orientation === \"vertical\"\n\n  // Get the clientRect of the selected tab\n  const [rect, setRect] = useState(() => {\n    if (isHorizontal) return { left: 0, width: 0 }\n    if (isVertical) return { top: 0, height: 0 }\n    return undefined\n  })\n\n  const [hasMeasured, setHasMeasured] = useState(false)\n\n  // Update the selected tab rect when the selectedIndex changes\n  useSafeLayoutEffect(() => {\n    if (isUndefined(selectedIndex)) return undefined\n\n    const tab = domContext.descendants[selectedIndex]\n    const tabRect = tab?.element?.getBoundingClientRect()\n\n    // Horizontal Tab: Calculate width and left distance\n    if (isHorizontal && tabRect) {\n      const { left, width } = tabRect\n      setRect({ left, width })\n    }\n\n    // Vertical Tab: Calculate height and top distance\n    if (isVertical && tabRect) {\n      const { top, height } = tabRect\n      setRect({ top, height })\n    }\n\n    // Prevent unwanted transition from 0 to measured rect\n    // by setting the measured state in the next tick\n    const frameId = requestAnimationFrame(() => {\n      setHasMeasured(true)\n    })\n\n    return () => {\n      if (frameId) {\n        cancelAnimationFrame(frameId)\n      }\n    }\n  }, [selectedIndex, isHorizontal, isVertical, domContext.descendants])\n\n  return {\n    position: \"absolute\",\n    transition: hasMeasured ? \"all 200ms cubic-bezier(0, 0, 0.2, 1)\" : \"none\",\n    ...rect,\n  }\n}\n\nfunction makeTabId(id: string, index: number) {\n  return `${id}--tab-${index}`\n}\n\nfunction makeTabPanelId(id: string, index: number) {\n  return `${id}--tabpanel-${index}`\n}\n"],"file":"use-tabs.js"}