import { focus, getAllFocusable } from "@chakra-ui/utils";
import * as React from "react";
import { useEventListener } from "./use-event-listener";
import { useLatestRef } from "./use-latest-ref";
var defaultOptions = {
  preventScroll: true,
  shouldFocus: false
};
export function useConditionalFocus(target, options) {
  if (options === void 0) {
    options = defaultOptions;
  }

  var {
    focusRef,
    preventScroll,
    shouldFocus,
    visible
  } = options;
  var element = target && "current" in target ? target.current : target;
  var autoFocus = shouldFocus && visible;

  var onFocus = () => {
    if (!element || !autoFocus || element.contains(document.activeElement) || element === document.activeElement) return;

    if (focusRef == null ? void 0 : focusRef.current) {
      focus(focusRef.current, {
        preventScroll
      });
    } else {
      var tabbableEls = getAllFocusable(element);

      if (tabbableEls.length > 0) {
        focus(tabbableEls[0], {
          preventScroll
        });
      }
    }
  };

  var onFocusRef = useLatestRef(onFocus);
  React.useEffect(() => {
    onFocusRef.current();
  }, []);
  useEventListener("transitionend", onFocus, element);
}
//# sourceMappingURL=use-conditional-focus.js.map