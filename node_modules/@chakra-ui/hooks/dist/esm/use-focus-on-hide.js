import { focus, isFocusable } from "@chakra-ui/utils";
import { useRef } from "react";
import { useEventListener } from "./use-event-listener";
import { useUpdateEffect } from "./use-update-effect";

/**
 * Popover hook to manage the focus when the popover closes or hides.
 *
 * We either want to return focus back to the popover trigger or
 * let focus proceed normally if user moved to another interactive
 * element in the viewport.
 */
export function useFocusOnHide(popoverRef, options) {
  var isFocusableRef = useRef(false);
  var {
    focusRef,
    shouldFocus,
    visible
  } = options;
  var autoFocus = shouldFocus && !visible;

  var onPointerDown = event => {
    if (!options.visible) return;
    var target = event.target;
    var prevent = isFocusable(target) && target !== focusRef.current && !popoverRef.current.contains(target);

    if (prevent) {
      isFocusableRef.current = true;
    }
  };

  useEventListener("mousedown", onPointerDown);
  useEventListener("touchstart", onPointerDown);
  useUpdateEffect(() => {
    return () => {
      if (!visible) {
        isFocusableRef.current = false;
      }
    };
  }, [visible]);
  useEventListener("transitionend", () => {
    if (!visible && focusRef.current && !isFocusableRef.current) {
      focus(focusRef.current);
    }
  }, popoverRef.current);
  /**
   * Using updateEffect here to allow effect to run only when
   * `options.visible` changes, not on mount
   */

  useUpdateEffect(() => {
    if (!autoFocus || !popoverRef.current || isFocusableRef.current) return;

    if (focusRef.current) {
      focus(focusRef.current);
    }
  }, [autoFocus, focusRef, visible, popoverRef]);
}
//# sourceMappingURL=use-focus-on-hide.js.map