{"version":3,"sources":["../../src/use-conditional-focus.ts"],"names":["defaultOptions","preventScroll","shouldFocus","useConditionalFocus","target","options","focusRef","visible","element","current","autoFocus","onFocus","contains","document","activeElement","tabbableEls","length","onFocusRef","React","useEffect"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AASA,IAAMA,cAA0C,GAAG;AACjDC,EAAAA,aAAa,EAAE,IADkC;AAEjDC,EAAAA,WAAW,EAAE;AAFoC,CAAnD;;AAKO,SAASC,mBAAT,CACLC,MADK,EAELC,OAFK,EAGL;AAAA,MADAA,OACA;AADAA,IAAAA,OACA,GADUL,cACV;AAAA;;AAAA,iBAC0DK,OAD1D;AAAA,MACQC,QADR,YACQA,QADR;AAAA,MACkBL,aADlB,YACkBA,aADlB;AAAA,MACiCC,WADjC,YACiCA,WADjC;AAAA,MAC8CK,OAD9C,YAC8CA,OAD9C;AAEA,MAAMC,OAAO,GAAGJ,MAAM,IAAI,aAAaA,MAAvB,GAAgCA,MAAM,CAACK,OAAvC,GAAiDL,MAAjE;AAEA,MAAMM,SAAS,GAAGR,WAAW,IAAIK,OAAjC;;AAEA,MAAMI,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,QACE,CAACH,OAAD,IACA,CAACE,SADD,IAEAF,OAAO,CAACI,QAAR,CAAiBC,QAAQ,CAACC,aAA1B,CAFA,IAGAN,OAAO,KAAKK,QAAQ,CAACC,aAJvB,EAME;;AAEF,QAAIR,QAAJ,oBAAIA,QAAQ,CAAEG,OAAd,EAAuB;AACrB,wBAAMH,QAAQ,CAACG,OAAf,EAAwB;AAAER,QAAAA,aAAa,EAAbA;AAAF,OAAxB;AACD,KAFD,MAEO;AACL,UAAMc,WAAW,GAAG,4BAAgBP,OAAhB,CAApB;;AACA,UAAIO,WAAW,CAACC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,0BAAMD,WAAW,CAAC,CAAD,CAAjB,EAAsB;AAAEd,UAAAA,aAAa,EAAbA;AAAF,SAAtB;AACD;AACF;AACF,GAjBD;;AAmBA,MAAMgB,UAAU,GAAG,gCAAaN,OAAb,CAAnB;AAEAO,EAAAA,KAAK,CAACC,SAAN,CAAgB,YAAM;AACpBF,IAAAA,UAAU,CAACR,OAAX;AACD,GAFD,EAEG,EAFH;AAIA,0CAAiB,eAAjB,EAAkCE,OAAlC,EAA2CH,OAA3C;AACD","sourcesContent":["import { focus, FocusableElement, getAllFocusable } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useEventListener } from \"./use-event-listener\"\nimport { useLatestRef } from \"./use-latest-ref\"\n\nexport interface UseConditionalFocusOptions {\n  visible?: boolean\n  shouldFocus?: boolean\n  preventScroll?: boolean\n  focusRef?: React.RefObject<FocusableElement>\n}\n\nconst defaultOptions: UseConditionalFocusOptions = {\n  preventScroll: true,\n  shouldFocus: false,\n}\n\nexport function useConditionalFocus<T extends HTMLElement>(\n  target: React.RefObject<T> | T,\n  options = defaultOptions,\n) {\n  const { focusRef, preventScroll, shouldFocus, visible } = options\n  const element = target && \"current\" in target ? target.current : target\n\n  const autoFocus = shouldFocus && visible\n\n  const onFocus = () => {\n    if (\n      !element ||\n      !autoFocus ||\n      element.contains(document.activeElement) ||\n      element === document.activeElement\n    )\n      return\n\n    if (focusRef?.current) {\n      focus(focusRef.current, { preventScroll })\n    } else {\n      const tabbableEls = getAllFocusable(element)\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], { preventScroll })\n      }\n    }\n  }\n\n  const onFocusRef = useLatestRef(onFocus)\n\n  React.useEffect(() => {\n    onFocusRef.current()\n  }, [])\n\n  useEventListener(\"transitionend\", onFocus, element)\n}\n"],"file":"use-conditional-focus.js"}