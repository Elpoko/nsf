{"version":3,"sources":["../../src/use-focus-on-hide.ts"],"names":["useFocusOnHide","popoverRef","options","isFocusableRef","focusRef","shouldFocus","visible","autoFocus","onPointerDown","event","target","prevent","current","contains"],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,cAAT,CACLC,UADK,EAELC,OAFK,EAGL;AACA,MAAMC,cAAc,GAAG,mBAAO,KAAP,CAAvB;AADA,MAEQC,QAFR,GAE2CF,OAF3C,CAEQE,QAFR;AAAA,MAEkBC,WAFlB,GAE2CH,OAF3C,CAEkBG,WAFlB;AAAA,MAE+BC,OAF/B,GAE2CJ,OAF3C,CAE+BI,OAF/B;AAIA,MAAMC,SAAS,GAAGF,WAAW,IAAI,CAACC,OAAlC;;AAEA,MAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAoC;AACxD,QAAI,CAACP,OAAO,CAACI,OAAb,EAAsB;AACtB,QAAMI,MAAM,GAAGD,KAAK,CAACC,MAArB;AAEA,QAAMC,OAAO,GACX,wBAAYD,MAAZ,KACAA,MAAM,KAAKN,QAAQ,CAACQ,OADpB,IAEA,CAAEX,UAAU,CAACW,OAAZ,CAAoCC,QAApC,CAA6CH,MAA7C,CAHH;;AAKA,QAAIC,OAAJ,EAAa;AACXR,MAAAA,cAAc,CAACS,OAAf,GAAyB,IAAzB;AACD;AACF,GAZD;;AAcA,0CAAiB,WAAjB,EAA8BJ,aAA9B;AACA,0CAAiB,YAAjB,EAA+BA,aAA/B;AAEA,wCAAgB,YAAM;AACpB,WAAO,YAAM;AACX,UAAI,CAACF,OAAL,EAAc;AACZH,QAAAA,cAAc,CAACS,OAAf,GAAyB,KAAzB;AACD;AACF,KAJD;AAKD,GAND,EAMG,CAACN,OAAD,CANH;AAQA,0CACE,eADF,EAEE,YAAM;AACJ,QAAI,CAACA,OAAD,IAAYF,QAAQ,CAACQ,OAArB,IAAgC,CAACT,cAAc,CAACS,OAApD,EAA6D;AAC3D,wBAAMR,QAAQ,CAACQ,OAAf;AACD;AACF,GANH,EAOEX,UAAU,CAACW,OAPb;AAUA;AACF;AACA;AACA;;AACE,wCAAgB,YAAM;AACpB,QAAI,CAACL,SAAD,IAAc,CAACN,UAAU,CAACW,OAA1B,IAAqCT,cAAc,CAACS,OAAxD,EAAiE;;AACjE,QAAIR,QAAQ,CAACQ,OAAb,EAAsB;AACpB,wBAAMR,QAAQ,CAACQ,OAAf;AACD;AACF,GALD,EAKG,CAACL,SAAD,EAAYH,QAAZ,EAAsBE,OAAtB,EAA+BL,UAA/B,CALH;AAMD","sourcesContent":["import { focus, FocusableElement, isFocusable } from \"@chakra-ui/utils\"\nimport { RefObject, useRef } from \"react\"\nimport { useEventListener } from \"./use-event-listener\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnHideOptions {\n  focusRef: RefObject<FocusableElement>\n  shouldFocus?: boolean\n  visible?: boolean\n}\n\n/**\n * Popover hook to manage the focus when the popover closes or hides.\n *\n * We either want to return focus back to the popover trigger or\n * let focus proceed normally if user moved to another interactive\n * element in the viewport.\n */\nexport function useFocusOnHide(\n  popoverRef: RefObject<HTMLElement>,\n  options: UseFocusOnHideOptions,\n) {\n  const isFocusableRef = useRef(false)\n  const { focusRef, shouldFocus, visible } = options\n\n  const autoFocus = shouldFocus && !visible\n\n  const onPointerDown = (event: MouseEvent | TouchEvent) => {\n    if (!options.visible) return\n    const target = event.target as HTMLElement\n\n    const prevent =\n      isFocusable(target) &&\n      target !== focusRef.current &&\n      !(popoverRef.current as HTMLElement).contains(target)\n\n    if (prevent) {\n      isFocusableRef.current = true\n    }\n  }\n\n  useEventListener(\"mousedown\", onPointerDown)\n  useEventListener(\"touchstart\", onPointerDown)\n\n  useUpdateEffect(() => {\n    return () => {\n      if (!visible) {\n        isFocusableRef.current = false\n      }\n    }\n  }, [visible])\n\n  useEventListener(\n    \"transitionend\",\n    () => {\n      if (!visible && focusRef.current && !isFocusableRef.current) {\n        focus(focusRef.current)\n      }\n    },\n    popoverRef.current,\n  )\n\n  /**\n   * Using updateEffect here to allow effect to run only when\n   * `options.visible` changes, not on mount\n   */\n  useUpdateEffect(() => {\n    if (!autoFocus || !popoverRef.current || isFocusableRef.current) return\n    if (focusRef.current) {\n      focus(focusRef.current)\n    }\n  }, [autoFocus, focusRef, visible, popoverRef])\n}\n"],"file":"use-focus-on-hide.js"}